(add-to-list'load-path (expand-file-name "~/emacs/" load-path))
(add-to-list'load-path (expand-file-name "~/emacs/tramp/lisp" load-path))
;(add-to-list'load-path (expand-file-name "~/emacs/csharp" load-path))
(add-to-list 'load-path (expand-file-name "~/emacs/jde/lisp"))
(add-to-list 'load-path (expand-file-name "~/emacs/site/cedet/common"))
(add-to-list 'load-path (expand-file-name "~/emacs/cedet/semantic"))
(add-to-list 'load-path (expand-file-name "~/emacs/cedet/speedbar"))
(add-to-list 'load-path (expand-file-name "~/emacs/site/elib"))
(add-to-list 'load-path (expand-file-name "~/emacs/cedet/eieio"))
(add-to-list 'load-path (expand-file-name "~/emacs/muse/lisp"))
(add-to-list 'load-path (expand-file-name "~/emacs/planner"))
(add-to-list 'load-path (expand-file-name "~/emacs/icicles"))
;(add-to-list 'load-path (expand-file-name "~/emacs/emacs-wiki"))

;(load-file (expand-file-name "~/emacs/site/cedet/common/cedet.el"))

;;{{{ misc loads

;; need to set this to semantic loads correctly
;(setq semantic-load-turn-useful-things-on t)
;(add-to-list 'load-path (expand-file-name "~/emacs/planner"))

;;}}}

;;{{{ system-specific


(normal-erase-is-backspace-mode 1)
;    (server-start)
  ; (set-default-font  
  ;    "-windows-proggycleansz-medium-*-normal-*-13-*-*-*-*-*-*-*")

(set-default-font  
"-*-Lucida Console-medium-r-*-*-12-120-96-96-c-*-iso8859-1")
;      "windows-proggycleansz-medium-*-normal-*-13-*-*-*-*-*-*-*")
;      "-windows-proggycleansz-medium-*-normal-*-13-*-*-*-*-*-*-*")

(set-frame-height (selected-frame) 60)
(set-frame-width (selected-frame) 122)

(require 'cygwin-mount)
(cygwin-mount-activate)

    (global-set-key (kbd "<f9> g") 'planner-goto-today)
    (global-set-key (kbd "<f9> t") 'planner-create-task-from-buffer)
    (global-set-key (kbd "<f9> x") 'planner-task-done)
    (global-set-key (kbd "<f9> y") 'planner-goto-yesterday)
    (global-set-key (kbd "<f9> z") 'planner-sort-tasks)
;    (global-set-key (kbd "\C-x\C-t") 'planner-create-task-from-buffer)


   (require 'muse-wiki)
    (require 'remind)
   (setq planner-directory "~/Plans")
   (setq planner-project-default-name "WikiPlanner") ;; or whatever name you use in muse-project-alist
;   (require 'remember)
;   (require 'remember-planner)

   (setq remember-handler-functions '(remember-planner-append))
   (setq remember-annotation-functions planner-annotation-functions)


   (require 'planner)

   (setq planner-carry-tasks-forward t)

 (add-hook 'planner-mode-hook
    (lambda () (interactive)             
      (make-local-hook 'after-save-hook)
      (add-hook 'after-save-hook 'remind-parse-planner t t)
      (add-hook 'after-save-hook 'remind-export-to-diary t t)))


;(require 'jde)*

;;}}} 

;;}}}

;;{{{ throw file-type modes here

;; from http://groups.yahoo.com/group/emacs-nxml-mode/message/893


;; Avoid determining the mode by contents of file.
;; Emacs is too smart for its own good.
;(setq magic-mode-alist nil)


(setq-default compile-command "nmake")

   ;; Make sure the repository is loaded as early as possible
   (setq bm-restore-repository-on-load t)
   (require 'bm)

   ;; Loading the repository from file when on start up.
   (add-hook' after-init-hook 'bm-repository-load)

   ;; Restoring bookmarks when on file find.
   (add-hook 'find-file-hooks 'bm-buffer-restore)

   ;; Saving bookmark data on killing a buffer
   (add-hook 'kill-buffer-hook 'bm-buffer-save)

   ;; Saving the repository to file when on exit.
   ;; kill-buffer-hook is not called when emacs is killed, so we
   ;; must save all bookmarks first.
   (add-hook 'kill-emacs-hook '(lambda nil
 	  		             (bm-buffer-save-all)
 			             (bm-repository-save)))

   ;; Update bookmark repository when saving the file.
   (add-hook 'after-save-hook 'bm-buffer-save)

   ;; Restore bookmarks when buffer is reverted.
   (add-hook 'after-revert-hook 'bm-buffer-restore)

    (global-set-key (kbd "<C-f2>") 'bm-toggle)
    (global-set-key (kbd "<f2>")   'bm-next)
    (global-set-key (kbd "<S-f2>") 'bm-previous)

;; put new modes here!
(setq auto-mode-alist 
	  (append 
	   (list 
		(cons "\\.sql$" 'sql-mode)
		(cons "\\.cs$" 'csharp-mode)
		(cons "\\.\\(xml\\|xsl\\|rng\\|xhtml\\|xsi\\|html\\|gpx\\|fo\\|exe.config\\)\\'" 'nxml-mode)
		(cons "\\.py$" 'python-mode)
		(cons "\\.js$" 'javascript-mode)
		(cons "\\.jsp$" 'anjsp-mode)
		(cons "\\.[bB][aA][tT]$" 'bat-mode)
		(cons "\\.cmd$" 'bat-mode)
		(cons "CONFIG\\."   'bat-mode)
		(cons "AUTOEXEC\\." 'bat-mode)
	   )
	   auto-mode-alist)) 


(autoload 'bat-mode "bat-mode"
      "DOS and WIndows BAT files" t)

(setq interpreter-mode-alist
      (cons '("python" . python-mode)
            interpreter-mode-alist))

(autoload 'python-mode "python-mode" "Python editing mode." t)
;(autoload 'ecmascript-mode "ecmascript-mode" "ECMA Mode." t)
(autoload 'javascript-mode "javascript" nil t)
(autoload 'csharp-mode "cc-mode" t)
(autoload 'anjsp-mode "anjsp" "anjsp-mode" t)

;(setq shell-file-name explicit-shell-file-name)
(autoload 'rst-mode "rst-mode" "mode for editing reStructuredText documents" t)
 (setq auto-mode-alist
       (append '(("\\.rst$" . rst-mode)
                 ("\\.rest$" . rst-mode)) auto-mode-alist))

;nxml -- note that it isn't an autoload
(load "~/emacs/nxml-mode/rng-auto.el")

(defalias 'perl-mode 'cperl-mode)

;;}}} end of file-type modes



;;{{{ system-independent misc stuff

;; Save all as UTF-8
;(set-language-environment "UTF-8")

;; get around our a bug with Gentoo
;(setq auto-save-file-name-transforms
;    `(("\\`/[^/]*:\\(.+/\\)*\\(.*\\)"
;      ,(expand-file-name "\\2" temporary-file-directory))))

;; un-tab any python files
 (defun python-mode-untabify ()
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "[ \t]+$" nil t)
        (delete-region (match-beginning 0) (match-end 0)))
      (goto-char (point-min))
      (if (search-forward "\t" nil t)
          (untabify (1- (point)) (point-max))))
    nil)

  (add-hook 'python-mode-hook 
            '(lambda ()
               (make-local-variable 'write-contents-hooks)
               (add-hook 'write-contents-hooks 'python-mode-untabify)))

;; turn on the mouse wheel
;; Remove the beeping. On linux the wheel mouse doesn't always work.
(global-set-key [mouse-4] 'up3lines )   ;; Wheel Mouse Up
(global-set-key [mouse-5] 'down3lines ) ;; Wheel Mouse Down

;; Their names say it all.
(defun up3lines() (interactive) (forward-line -3) )
(defun down3lines () (interactive)  (forward-line 3) )

(defun reb-copy-unquoted ()
"Copy current RE into the kill ring for later insertion as unquoted."
(interactive)
(reb-update-regexp)
(let ((re (with-temp-buffer
(insert (reb-target-binding reb-regexp))
(replace-string "\\\\" "\\" nil (point-min) (point-max))
(buffer-substring (point-min) (point-max)))))
(kill-new re)
(message "Regexp copied to kill-ring")))

;; don't show the splash
(setq inhibit-startup-message t)

; read a Word file
(autoload 'no-word "no-word" "word to txt")
(add-to-list 'auto-mode-alist '("\\.doc\\'" . no-word))

;;; add these lines if you like color-based syntax highlighting
(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)

;; to setup tabs
(setq c-basic-indent 2)
(setq tab-width 4)
(setq indent-tabs-mode nil)

;; pretty colors . .. 
(require 'color-theme)
(color-theme-initialize)
(color-theme-kingsajz)


(set-background-color "NavyBlue")
(set-foreground-color "grey")
(set-cursor-color     "red")
;;;;;;;;;;;;;;;;;
;; from http://opal.cabochon.com/~stevey/blog-rants/effective-emacs.html
;;;;;;;;;;;;;;;;;
(global-set-key "\C-w"     'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)
(global-set-key "\C-c\C-k" 'kill-region)
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)

;(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
;(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
;(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

(global-set-key [f5]       'call-last-kbd-macro)

;;;;;;;;;;;;;;;;;
;; power macros
;(require 'power-macros)
;(require 'repdet)
;(require 'session)
;(add-hook 'after-init-hook 'session-initialize)


;; Text Options
(setq-default fill-column 70)
;(setq-default fill-prefix "    ")
(add-hook 'text-mode-hook 'text-mode-hook-identify)
(add-hook 'text-mode-hook 'turn-on-auto-fill)


;; Display column number
(column-number-mode t)

;; Display date/time
(setq display-time-day-and-date t)
(display-time)

;; Highlight regions for cutting or copying
(setq transient-mark-mode t)

;; When I close a paren, show me the opener for it.
(setq show-paren-mode t)

;; short-cut for yanking
(global-set-key "\M-s" 'bbdb-yank-addresses)

;; Map M-g for goto-line (like with XEmacs)
(global-set-key "\M-g" 'goto-line)    

;; Convert tabs to spaces 
(setq indent-tabs-mode nil)

;; Replace "yes or no" with y or n
(defun yes-or-no-p (arg)
  "An alias for y-or-n-p, because I hate having to type 'yes' or 'no'."
  (y-or-n-p arg))

(setq-default abbrev-mode t)
(load "~/emacs/mh-abbrevs.el")

(defun mh-find-rrword(rrword ) 
  (interactive "sRR Word to Find: ")
  (find-file "h:/Plans/UpRailRoadTerms.muse")
  (goto-line 1)
  (re-search-forward (concat "^" rrword "\:"))
)
(global-set-key (kbd "C-c s") 'mh-find-rrword)

(defun mh-find-carevent(rrword ) 
  (interactive "sCar Event to Find: ")
  (find-file "h:/Plans/UpCarEvents.muse")
  (goto-line 1)
  (re-search-forward (concat "^" rrword "\t"))
)
(global-set-key (kbd "C-c c") 'mh-find-carevent)

; from http://emacs.wordpress.com/2007/01/17/eval-and-replace-anywhere/
(defun fc-eval-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))

(global-set-key (kbd "C-c e") 'fc-eval-and-replace)
;(require 'sudoku)

; cvs stuff
;(require 'pcvs)
;(require 'add-log)

;; DB2 crap -- probably only useful in windows
;;; Change the path to db2cmd to reflect the correct 
;;; location for your machine. 
(setq sql-db2-program "C:/PROGRA~1/IBM/SQLLIB/BIN/DB2CMD.exe")

;;; The interesting options here is the "-t" option 
;;; passed to "db2". This is extremely handy - it 
;;; means that ';' (semicolon) ; is treated as the command 
;;; line terminator. The default is to treat the end-of-line 
;;; as a SQL statement terminator. 
;;; You may look up the command reference online for an 
;;; explanation of the rest. 
(setq sql-db2-options '("-c" "-i" "-w" "db2" "-tv"))

;;{{{ My autoinsert templates

(setq auto-insert-directory (expand-file-name "~/.autoinsert/"))
(setq auto-insert-query nil) ;; don't ask, just do it.
(define-auto-insert "\\.html\\'" "autoinsert.html") 
(define-auto-insert "\\.sh\\'" "autoinsert.sh") 
(define-auto-insert "\\.py\\'" "autoinsert.py")
(define-auto-insert "\\.pl\\'" "autoinsert.pl")
(define-auto-insert "\\.exe.config\\'" "autoinsert.exe.config")
(define-auto-insert "matrix.binary.net:/home/thehaas/pubhtml/blog/.+.txt\\'" "autoinsert-blog.txt")

; insert template for my blog
(add-hook 'find-file-hooks 'auto-insert)

;;}}}

;;}}}

;;{{{ custom setup

(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(message-cited-text ((t (:foreground "red3"))))
 '(message-header-contents ((((type x)) (:foreground "green3"))))
 '(message-headers ((t (:foreground "blue" :bold t))))
 '(message-highlighted-header-contents ((((type x)) (:bold t)) (t (:bold t))))
 '(message-url ((t (:foreground "blue" :bold t)))))

;;}}}

;;{{{ folding config

;(if (load "folding" 'nomessage 'noerror)
;    (folding-mode-add-find-file-hook))

;  (folding-add-to-marks-list 'php-mode                "//{"  "//}"  nil t)
;  (folding-add-to-marks-list 'prolog-mode             "%{{{" "%}}}" nil t)
;  (folding-add-to-marks-list 'html-mode               "<!-- {{{ " "<!-- }}} -->" " -->" nil t)
;  (folding-add-to-marks-list 'python-mode                "# {{{"  "# }}}"  nil t)

;;}}}

;;{{{ tramp config

(require 'tramp)
(add-to-list 'backup-directory-alist
    (cons "." "~/emacs/backups/"))
(setq tramp-backup-directory-alist backup-directory-alist)
(setq tramp-auto-save-directory "~/emacs/backups/")

;;}}}

;; set dictionary
(setq-default ispell-program-name "c:/Documents and Settings/xcov317/Program Files/Aspell/bin/aspell.exe")
(setq ispell-dictionary "american")
(setq flyspell-default-dictionary "american")

;;{{{ GNUServer setup
(require 'gnuserv)
(setq gnuserv-frame (car (frame-list)))
(gnuserv-start)

;;}}}
;(load-file (expand-file-name "~/emacs/site/common/cedet.el"))
;(require 'jde)
;

(eval-after-load "icomplete" '(progn (require 'icomplete+)))
;(require 'filecache)
(defun insert-standard-date ()
  "Inserts standard date time string." 
  (interactive)
  (insert (format-time-string "%c")))

(require 'linum)
(global-set-key (kbd "C-c d") 'insert-standard-date)

(put 'downcase-region 'disabled nil)
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(case-fold-search t)
 '(current-language-environment "English")
 '(cygwin-mount-build-mount-table-asynch t)
 '(cygwin-mount-table (quote (("C:\\" . "/c/") ("H:\\" . "/h/"))))
 '(global-font-lock-mode t nil (font-lock))
 '(icicle-reminder-prompt-flag 0)
 '(icicle-saved-completion-sets (quote (("muse" . "h:/icicles-muse.cache") ("python" . "h:/.icicles-python.cache"))))
 '(jde-compiler (quote ("javac server" "")))
 '(jde-global-classpath (quote ("c:\\java\\junit.jar")))
 '(jde-jdk (quote ("Sun JDK 1.4.2_06")))
 '(jde-jdk-registry (quote (("Sun JDK 1.4.2_06" . "/cygdrive/c/j2sdk1.4.2_06"))))
 '(jde-project-name "Largest")
 '(mark-diary-entries-in-calendar t)
 '(muse-mode-auto-p t)
 '(muse-project-alist (quote (("WikiPlanner" ("~/Plans")))))
 '(nxml-section-element-name-regexp "article\\|\\(sub\\)*section\\|chapter\\|div\\|appendix\\|part\\|preface\\|reference\\|simplesect\\|bibliography\\|bibliodiv\\|glossary\\|glossdiv|status\\|")
 '(py-jython-command "h:\\Projects\\jython-2.1\\jython.bat")
 '(show-paren-mode t)
 '(text-mode-hook (quote (turn-on-auto-fill text-mode-hook-identify)))
 '(transient-mark-mode t)
 '(w32-symlinks-handle-shortcuts t))
;(;--------------------------- power-macros ---------------------------
; ;-             <f4> - specific for pm-macro-manage-mode             -
; ;--------------------------------------------------------------------
;	pm-def-macro
;	'pm-dnet-checknull
;	'pm-macro-manage-mode [f4]
;	"this will auto-magically create an if-then-else statement to check for
;Nulls in WP.Net datasets.  Should only really be used in wpNet.py"
;	"C-a C-k C-y C-p C-y 3*M-b C-SPC C-a C-w 2*TAB DEL 2*SPC if SPC not SPC
; 2*M-f C-f Is C-e Null(): C-n TAB DEL C-a TAB C-e RET TAB 2*SPC else:
; RET 2*C-p C-k C-y 2*C-n C-y 3*M-b C-k None RET C-x C-s"
; ;--------------------------------------------------------------------
;)
;
;
;(;--------------------------- power-macros ---------------------------
; ;-              C-c # - specific for fundamental-mode               -
; ;--------------------------------------------------------------------
;	pm-def-macro
;	'mh-comment
;	'fundamental-mode "#"
;	"Comments out lines"
;	"M-x replace-regex RET ^ RET # RET"
; ;--------------------------------------------------------------------
;)
;
;
;(;--------------------------- power-macros ---------------------------
; ;-                <C-f1> - specific for python-mode                 -
; ;--------------------------------------------------------------------
;	pm-def-macro
;	'py-insert-class
;	'python-mode [C-f1]
;	"Makes a basic Python class declaration
;"
;	"CLa 2*DEL lass SPC Name: SPC C-SPC C-u C-x q C-x C-x C-x r s a C-a C-k
; class SPC C-x r i a C-e : RET def SPC in 2*DEL __init__(self): RET"
; ;--------------------------------------------------------------------
;)
;
;
;(;--------------------------- power-macros ---------------------------
; ;-                 Unbound - specific for textmode                 -
; ;--------------------------------------------------------------------
;	pm-def-macro
;	'mh-cropper-timer
;	'text-mode nil
;	"sets up file times for a cropper file"
;	"C-a C-SPC C-s | <left> M-w C-e RET C-y ||"
; ;--------------------------------------------------------------------
;)
;
;
;(;--------------------------- power-macros ---------------------------
; ;-                   Unbound - global definition                    -
; ;--------------------------------------------------------------------
;	pm-def-macro
;	'mh-undo-lf-script
;	'global nil
;	"Copies the clipboard to the buffer and tries to change the [lf] to returns"
;	"C-y C-SPC C-a M-x <up> RET [lf] RET C-q LFD RET"
; ;--------------------------------------------------------------------
;)
;
;
;(;--------------------------- power-macros ---------------------------
; ;-                 <f1> RET - specific for sh-mode                  -
; ;--------------------------------------------------------------------
;	pm-def-macro
;	'mh-winpath-to-unix
;	'sh-mode [f1 13]
;	"Converts Windows paths to Unix-like so cygpath has a chance at it
;inside of shell scripts."
;	"C-a C-SPC C-e x DEL C-a C-SPC C-e M-x replace-regex RET ^.*?[Ss} DEL
; ]et SPC .*?= 2*RET C-SPC C-e M-x plre 4*DEL replace-string RET \\ RET /
; RET C-a C-SPC C-e M-x <up> RET SPC RET \\ SPC RET C-a C-SPC C-e M-x
; <up> RET ; SPC DEL RET SPC RET C-a for SPC dir SPC in SPC C-e RET do
; 2*RET done C-p"
; ;--------------------------------------------------------------------
;)
;
;
;(;--------------------------- power-macros ---------------------------
; ;-              C-c 3 - specific for fundamental-mode               -
; ;--------------------------------------------------------------------
;	pm-def-macro
;	'mh-uncomment
;	'fundamental-mode "3"
;	"Uncomments lines"
;	"M-x replace-regex TAB RET ^ # 2*RET"
; ;--------------------------------------------------------------------
;)
;
;
;(;--------------------------- power-macros ---------------------------
; ;-                  C-c # - specific for bat-mode                   -
; ;--------------------------------------------------------------------
;	pm-def-macro
;	'mh-remline
;	'bat-mode "#"
;	"Comments lines in .bat mode"
;	"M-x replace-regex RET ^ RET rem SPC RET"
; ;--------------------------------------------------------------------
;)
;
;
;
;;(;--------------------------- power-macros ---------------------------
; ;-                    m - specific for text-mode                    -
; ;--------------------------------------------------------------------
;;	pm-def-macro
;;	'mh-col-switch
;;	'text-mode null
;;	"switches columns"
;;	"C-a C-s SPC C-k C-a C-y SPC"
; ;--------------------------------------------------------------------
;;)
;
;
;(;--------------------------- power-macros ---------------------------
; ;-                  C-c 3 - specific for bat-mode                   -
; ;--------------------------------------------------------------------
;	pm-def-macro
;	'mh-unremline
;	'bat-mode "3"
;	"Uncomment line from .bat file"
;	"M-x replace-regex RET ^rem SPC 2*RET"
; ;--------------------------------------------------------------------
;)
;
;
;(;--------------------------- power-macros ---------------------------
; ;-                  <f3> - specific for text-mode                   -
; ;--------------------------------------------------------------------
;	pm-def-macro
;	'mh-list-of-links
;	'text-mode [f3]
;	"An easy way to make a list of links for my blog.  Asks for a link
;target and description and then puts them in a li tag and \"a\" tags, etc."
;	"link SPC target: SPC NUL C-u C-x q C-x C-x C-x r s t C-a C-k link SPC
; desc: SPC NUL C-u C-x q C-x C-x C-x r s d C-a C-k < li> SPC DEL <a SPC
; href=\" C-x r i t C-e \"> C-x r i d C-e < /a> </li>"
; ;--------------------------------------------------------------------
;)
;
;
;(;--------------------------- power-macros ---------------------------
; ;-                   Unbound - global definition                    -
; ;--------------------------------------------------------------------
;	pm-def-macro
;	'mh-itemify
;	'global nil
;	"This will delete the number at the beginning of a line and put li tags
;around it."
;	"C-a 2*C-d < li> C-e < /li>"
; ;--------------------------------------------------------------------
;)
;
;
;(;--------------------------- power-macros ---------------------------
; ;-                <f1> 1 - specific for python-mode                 -
; ;--------------------------------------------------------------------
;	pm-def-macro
;	'mh-ipy-nullvalue
;	'python-mode [f1 49]
;	"This is for converting WP.Net datasets into IPy objects. It makes the 
;structure for testing for null values"
;	"C-a 2*M-f C-f C-k C-y C-p C-e RET if SPC not SPC C-y M-b Is C-e Null():
; C-n TAB C-e RET DEL else: RET 2*C-p C-SPC 2*M-f M-w 2*C-n C-y =None
; RET"
; ;--------------------------------------------------------------------
;)
;

;; this should be after all key definitions, so I made it last
(require 'icicles) ; Load this library.
(icicle-mode 1)    ; Turn on Icicle mode.

(put 'upcase-region 'disabled nil)

(put 'set-goal-column 'disabled nil)
