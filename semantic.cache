;; Object emacs/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "emacs/"
  :tables (list 
   (semanticdb-table "psvn.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("easymenu" include nil nil [6621 6640]) ("svn-status-verbose" variable (:user-visible-flag t :default-value t) nil [6669 6730]) ("svn-log-edit-file-name" variable (:user-visible-flag t :default-value "++svn-log++") nil [6731 6805]) ("svn-log-edit-insert-files-to-commit" variable (:user-visible-flag t :default-value t) nil [6806 6909]) ("svn-status-hide-unknown" variable (:user-visible-flag t) nil [6910 6992]) ("svn-status-hide-unmodified" variable (:user-visible-flag t) nil [6993 7081]) ("svn-status-directory-history" variable (:user-visible-flag t) nil [7082 7167]) ("svn-status-sort-status-buffer" variable (:default-value t) nil [7168 7360]) ("svn-status-unmark-files-after-list" variable (:user-visible-flag t :default-value (quote (commit revert))) nil [7362 7527]) ("svn-status-negate-meaning-of-arg-commands" variable (:user-visible-flag t) nil [7529 7708]) ("svn-status-svn-executable" variable (:user-visible-flag t :default-value "svn") nil [7710 7785]) ("svn-status-svn-environment-var-list" variable (:user-visible-flag t) nil [7787 8071]) ("svn-status-window-alist" variable (:default-value (quote ((diff "*svn-diff*") (log "*svn-log*") (info t) (blame t) (proplist t) (update t)))) nil [8073 8583]) ("svn-status-short-mod-flag-p" variable (:user-visible-flag t :default-value t) nil [8585 9116]) ("svn-status-use-header-line" variable (:user-visible-flag t :default-value t) nil [9118 9335]) ("svn-status-default-log-arguments" variable (:user-visible-flag t) nil [9383 9536]) ("svn-trac-project-root" variable nil nil [9538 9624]) ("svn-status-module-name" variable nil nil [9626 9705]) ("svn-status-load-state-before-svn-status" variable (:default-value t) nil [9707 9813]) ("svn-log-edit-mode-hook" variable nil nil [9825 9906]) ("svn-log-edit-done-hook" variable nil nil [9907 9984]) ("svn-status-wash-control-M-in-process-buffers" variable (:user-visible-flag t :default-value (eq system-type (quote windows-nt))) nil [9986 10129]) ("svn-status-track-user-input" variable nil nil [10157 10309]) ("defgroup" code nil nil [10331 10402]) ("defgroup" code nil nil [10404 10460]) ("if" code nil nil [10543 10613]) ("svn-xemacsp" variable (:constant-flag t :default-value (featurep (quote xemacs))) nil [10499 10540]) ("cl" include nil nil [10483 10496]) ("add-to-list" code nil nil [10688 10767]) ("svn-process-cmd" variable nil nil [10792 10820]) ("svn-status-info" variable nil nil [10821 10849]) ("svn-status-base-info" variable nil nil [10850 10883]) ("svn-status-initial-window-configuration" variable nil nil [10884 10936]) ("svn-status-default-column" variable (:default-value 23) nil [10937 10974]) ("svn-status-default-revision-width" variable (:default-value 4) nil [10975 11019]) ("svn-status-default-author-width" variable (:default-value 9) nil [11020 11062]) ("svn-status-line-format" variable (:default-value " %c%c%c %4s %4s %-9s") nil [11063 11117]) ("svn-start-of-file-list-line-number" variable nil nil [11118 11163]) ("svn-status-files-to-commit" variable nil nil [11164 11203]) ("svn-status-pre-commit-window-configuration" variable nil nil [11204 11259]) ("svn-status-pre-propedit-window-configuration" variable nil nil [11260 11317]) ("svn-status-head-revision" variable nil nil [11318 11355]) ("svn-status-root-return-info" variable nil nil [11356 11396]) ("svn-status-property-edit-must-match-flag" variable nil nil [11397 11450]) ("svn-status-propedit-property-name" variable nil nil [11451 11497]) ("svn-status-propedit-file-list" variable nil nil [11498 11540]) ("svn-status-mode-line-process" variable nil nil [11541 11581]) ("svn-status-mode-line-process-status" variable nil nil [11582 11629]) ("svn-status-mode-line-process-edit-flag" variable nil nil [11630 11680]) ("svn-status-edit-svn-command" variable nil nil [11681 11721]) ("svn-status-update-previous-process-output" variable nil nil [11722 11776]) ("svn-status-temp-dir" variable (:default-value (or (when (boundp (quote temporary-file-directory)) temporary-file-directory) (when (boundp (quote temp-directory)) temp-directory) "/tmp/")) nil [11777 11978]) ("svn-temp-suffix" variable (:default-value (make-temp-name ".")) nil [11979 12024]) ("svn-status-temp-file-to-remove" variable nil nil [12025 12068]) ("svn-status-temp-arg-file" variable (:default-value (concat svn-status-temp-dir "svn.arg" svn-temp-suffix)) nil [12069 12157]) ("svn-status-options" variable nil nil [12158 12189]) ("svn-status-commit-rev-number" variable nil nil [12190 12231]) ("svn-status-operated-on-dot" variable nil nil [12232 12271]) ("svn-status-elided-list" variable nil nil [12272 12307]) ("svn-status-marked-face" variable (:default-value (quote ((((type tty) (class color)) (:foreground "green" :weight light)) (((class color) (background light)) (:foreground "green3")) (((class color) (background dark)) (:foreground "palegreen2")) (t (:weight bold))))) nil [12319 12672]) ("svn-status-marked-popup-face" variable (:default-value (quote ((((type tty) (class color)) (:foreground "green" :weight light)) (((class color) (background light)) (:foreground "green3")) (((class color) (background dark)) (:foreground "palegreen2")) (t (:weight bold))))) nil [12674 13026]) ("svn-status-update-available-face" variable (:default-value (quote ((((type tty) (class color)) (:foreground "magenta" :weight light)) (((class color) (background light)) (:foreground "magenta")) (((class color) (background dark)) (:foreground "yellow")) (t (:weight bold))))) nil [13028 13501]) ("svn-status-directory-face" variable (:default-value (quote ((((type tty) (class color)) (:foreground "lightblue" :weight light)) (((class color) (background light)) (:foreground "blue4")) (((class color) (background dark)) (:foreground "lightskyblue1")) (t (:weight bold))))) nil [13531 13938]) ("svn-status-filename-face" variable (:default-value (quote ((((class color) (background light)) (:foreground "chocolate")) (((class color) (background dark)) (:foreground "beige"))))) nil [13973 14283]) ("svn-status-locked-face" variable (:default-value (quote ((t (:weight bold :foreground "Red"))))) nil [14318 14479]) ("svn-status-switched-face" variable (:default-value (quote ((((class color) (background light)) (:foreground "CadetBlue")) (((class color) (background dark)) (:foreground "Aquamarine")) (t (:bold t :italic t))))) nil [14521 14844]) ("svn-highlight" variable (:default-value t) nil [14846 14870]) ("svn-add-face" function (:arguments ("str" "face" "&optional" "keymap")) nil [14894 15599]) ("svn-status-maybe-add-face" function (:arguments ("condition" "text" "face")) nil [15601 15781]) ("svn-status-choose-face-to-add" function (:arguments ("condition" "text" "face1" "face2")) nil [15783 15993]) ("svn-status-maybe-add-string" function (:arguments ("condition" "string" "face")) nil [15995 16192]) ("unless" code nil nil [16221 16297]) ("unless" code nil nil [16298 16380]) ("unless" code nil nil [16381 16470]) ("if" code nil nil [16493 16547]) ("if" code nil nil [16549 16614]) ("if" code nil nil [16625 16811]) ("svn-status-display-new-status-buffer" variable nil nil [16813 16862]) ("svn-status" function (:user-visible-flag t :arguments ("dir" "&optional" "arg")) nil [16878 18771]) ("svn-status-use-history" function nil nil [18773 19144]) ("svn-run-svn" function (:arguments ("run-asynchron" "clear-process-buffer" "cmdtype" "&rest" "arglist")) nil [19146 21970]) ("svn-process-sentinel-fixup-path-seperators" function nil nil [21972 22237]) ("svn-process-sentinel" function (:arguments ("process" "event")) nil [22239 27106]) ("svn-process-filter" function (:arguments ("process" "str")) nil [27108 27807]) ("svn-parse-rev-num" function (:arguments ("str")) nil [27809 27965]) ("svn-status-make-dummy-dirs" function (:arguments ("dir-list")) nil [27968 28175]) ("svn-parse-status-result" function nil nil [28178 34067]) ("svn-status-sort-predicate" function (:arguments ("a" "b")) nil [34161 34429]) ("svn-status-remove-temp-file-maybe" function nil nil [34431 34839]) ("svn-status-remove-control-M" function (:user-visible-flag t) nil [34841 35148]) ("condition-case" code nil nil [35150 35369]) ("svn-status-mode-map" variable nil nil [35371 35446]) ("svn-status-mode-property-map" variable nil nil [35447 35550]) ("svn-status-mode-options-map" variable nil nil [35551 35651]) ("svn-status-mode-trac-map" variable nil nil [35652 35761]) ("svn-status-mode-extension-map" variable nil nil [35762 35874]) ("when" code nil nil [35876 41109]) ("when" code nil nil [41110 42638]) ("when" code nil nil [42639 42977]) ("when" code nil nil [42978 43560]) ("when" code nil nil [43561 43799]) ("easy-menu-define" code nil nil [43801 47009]) ("svn-status-popup-menu" function (:arguments ("event")) nil [47012 47741]) ("svn-status-face-set-temporary-during-popup" function (:arguments ("face" "begin" "end" "menu" "&optional" "prefix")) nil [47743 48141]) ("svn-status-mode" function (:user-visible-flag t) nil [48143 48930]) ("svn-status-update-mode-line" function nil nil [48932 49127]) ("svn-status-bury-buffer" function (:user-visible-flag t :arguments ("arg")) nil [49129 49923]) ("svn-status-find-files" function (:user-visible-flag t) nil [49925 50187]) ("svn-status-find-file-other-window" function (:user-visible-flag t) nil [50190 50459]) ("svn-status-view-file-other-window" function (:user-visible-flag t) nil [50461 50730]) ("svn-status-find-file-or-examine-directory" function (:user-visible-flag t) nil [50732 51169]) ("svn-status-examine-parent" function (:user-visible-flag t) nil [51171 51324]) ("svn-status-mouse-find-file-or-examine-directory" function (:user-visible-flag t :arguments ("event")) nil [51326 51617]) ("svn-status-line-info->ui-status" function (:arguments ("line-info")) nil [51619 51688]) ("svn-status-line-info->has-usermark" function (:arguments ("line-info")) nil [51690 51770]) ("svn-status-line-info->user-elide" function (:arguments ("line-info")) nil [51771 51849]) ("svn-status-line-info->filemark" function (:arguments ("line-info")) nil [51851 51919]) ("svn-status-line-info->propmark" function (:arguments ("line-info")) nil [51920 51988]) ("svn-status-line-info->filename" function (:arguments ("line-info")) nil [51989 52057]) ("svn-status-line-info->filename-nondirectory" function (:arguments ("line-info")) nil [52058 52191]) ("svn-status-line-info->localrev" function (:arguments ("line-info")) nil [52192 52306]) ("svn-status-line-info->lastchangerev" function (:arguments ("line-info")) nil [52307 52502]) ("svn-status-line-info->author" function (:arguments ("line-info")) nil [52503 52569]) ("svn-status-line-info->update-available" function (:arguments ("line-info")) nil [52570 52793]) ("svn-status-line-info->locked" function (:arguments ("line-info")) nil [52794 53100]) ("svn-status-line-info->historymark" function (:arguments ("line-info")) nil [53101 53325]) ("svn-status-line-info->switched" function (:arguments ("line-info")) nil [53326 53548]) ("svn-status-line-info->is-visiblep" function (:arguments ("line-info")) nil [53550 53809]) ("svn-status-line-info->hide-because-unknown" function (:arguments ("line-info")) nil [53811 53963]) ("svn-status-line-info->hide-because-unmodified" function (:arguments ("line-info")) nil [53965 54610]) ("svn-status-line-info->hide-because-user-elide" function (:arguments ("line-info")) nil [54612 54731]) ("svn-status-line-info->show-user-elide-continuation" function (:arguments ("line-info")) nil [54733 54866]) ("svn-status-line-info->set-filemark" function (:arguments ("line-info" "value")) nil [54892 54990]) ("svn-status-line-info->set-propmark" function (:arguments ("line-info" "value")) nil [54992 55090]) ("svn-status-line-info->set-localrev" function (:arguments ("line-info" "value")) nil [55092 55190]) ("svn-status-line-info->set-lastchangerev" function (:arguments ("line-info" "value")) nil [55192 55295]) ("svn-status-copy-filename-as-kill" function (:user-visible-flag t :arguments ("arg")) nil [55297 55723]) ("svn-status-toggle-elide" function nil nil [55725 57342]) ("svn-status-apply-elide-list" function (:user-visible-flag t) nil [57344 58529]) ("svn-status-update-with-command-list" function (:arguments ("cmd-list")) nil [58531 59860]) ("svn-status-annotate-status-buffer-entry" function (:arguments ("action" "line-info")) nil [59862 60995]) ("svn-status-parse-commit-output" function nil nil [61169 62894]) ("svn-status-line-info->directory-p" function (:arguments ("line-info")) nil [62975 63233]) ("svn-status-line-info->full-path" function (:arguments ("line-info")) nil [63235 63416]) ("svn-status-count-/" function (:arguments ("string")) nil [63471 63667]) ("svn-insert-line-in-status-buffer" function (:arguments ("line-info")) nil [63669 66606]) ("svn-status-update-buffer" function (:user-visible-flag t) nil [66608 70462]) ("svn-status-parse-info" function (:user-visible-flag t :arguments ("arg")) nil [70464 71036]) ("svn-status-parse-info-result" function nil nil [71038 71329]) ("svn-status-base-info->url" function nil nil [71331 71449]) ("svn-status-toggle-edit-cmd-flag" function (:arguments ("&optional" "reset")) nil [71451 72157]) ("svn-status-goto-root-or-return" function (:user-visible-flag t) nil [72159 72624]) ("svn-status-next-line" function (:arguments ("nr-of-lines")) nil [72626 72818]) ("svn-status-previous-line" function (:arguments ("nr-of-lines")) nil [72820 73020]) ("svn-status-possibly-negate-meaning-of-arg" function (:arguments ("arg" "&optional" "command")) nil [73022 73326]) ("svn-status-update" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [73328 73701]) ("svn-status-get-line-information" function nil nil [73703 74043]) ("svn-status-get-file-list" function (:arguments ("use-marked-files")) nil [74045 74267]) ("svn-status-get-file-list-names" function (:arguments ("use-marked-files")) nil [74269 74413]) ("svn-status-select-line" function nil nil [74415 74738]) ("svn-status-ensure-cursor-on-file" function nil nil [74740 74870]) ("svn-status-directory-containing-point" function (:arguments ("allow-self")) nil [74872 75546]) ("svn-status-line-info->directory-containing-line-info" function (:arguments ("line-info" "allow-self")) nil [75548 76092]) ("svn-status-set-user-mark" function (:user-visible-flag t :arguments ("arg")) nil [76094 76698]) ("svn-status-unset-user-mark" function (:user-visible-flag t :arguments ("arg")) nil [76700 77318]) ("svn-status-unset-user-mark-backwards" function (:user-visible-flag t) nil [77320 77839]) ("svn-status-apply-usermark" function (:arguments ("set-mark" "only-this-line")) nil [77841 79658]) ("svn-status-apply-usermark-checked" function (:arguments ("check-function" "set-mark")) nil [79660 80566]) ("svn-status-mark-unknown" function (:user-visible-flag t :arguments ("arg")) nil [80568 80900]) ("svn-status-mark-added" function (:user-visible-flag t :arguments ("arg")) nil [80902 81230]) ("svn-status-mark-modified" function (:user-visible-flag t :arguments ("arg")) nil [81232 81708]) ("svn-status-mark-deleted" function (:user-visible-flag t :arguments ("arg")) nil [81710 82057]) ("svn-status-mark-changed" function (:user-visible-flag t :arguments ("arg")) nil [82059 82478]) ("svn-status-unset-all-usermarks" function nil nil [82480 82598]) ("svn-status-toggle-hide-unknown" function nil nil [82600 82749]) ("svn-status-toggle-hide-unmodified" function nil nil [82751 82909]) ("svn-status-get-file-name-buffer-position" function (:arguments ("name")) nil [82911 83842]) ("svn-status-goto-file-name" function (:arguments ("name")) nil [83844 84110]) ("svn-status-find-info-for-file-name" function (:arguments ("name")) nil [84112 84431]) ("svn-status-marked-files" function nil nil [84433 84952]) ("svn-status-marked-file-names" function nil nil [84954 85062]) ("svn-status-ui-information-hash-table" function nil nil [85064 85466]) ("svn-status-create-arg-file" function (:arguments ("file-name" "prefix" "file-info-list" "postfix")) nil [85469 85798]) ("svn-status-show-process-buffer-internal" function (:arguments ("&optional" "scroll-to-top")) nil [85800 86138]) ("svn-status-show-process-output" function (:arguments ("cmd" "&optional" "scroll-to-top")) nil [86140 87464]) ("svn-status-show-svn-log" function (:user-visible-flag t :arguments ("arg")) nil [87467 88548]) ("svn-status-info" function (:user-visible-flag t) nil [88550 88851]) ("svn-status-blame" function (:user-visible-flag t) nil [88901 89204]) ("svn-status-show-svn-diff" function (:user-visible-flag t :arguments ("arg")) nil [89206 89561]) ("svn-status-show-svn-diff-for-marked-files" function (:user-visible-flag t :arguments ("arg")) nil [89563 89869]) ("svn-status-show-svn-diff-internal" function (:arguments ("arg" "&optional" "use-all-marked-files")) nil [89871 90604]) ("svn-status-diff-mode" function nil nil [90606 90884]) ("svn-status-show-process-buffer" function (:user-visible-flag t) nil [90886 91031]) ("svn-status-add-file-recursively" function (:user-visible-flag t :arguments ("arg")) nil [91033 91565]) ("svn-status-add-file" function (:user-visible-flag t :arguments ("arg")) nil [91567 92169]) ("svn-status-make-directory" function (:user-visible-flag t :arguments ("dir")) nil [92171 92608]) ("svn-status-mv" function (:user-visible-flag t) nil [92696 97145]) ("svn-status-revert" function (:user-visible-flag t) nil [97147 97830]) ("svn-status-rm" function (:user-visible-flag t :arguments ("force")) nil [97832 98732]) ("svn-status-update-cmd" function nil nil [98734 98848]) ("svn-status-commit-file" function (:user-visible-flag t) nil [98850 99257]) ("svn-status-pop-to-commit-buffer" function nil nil [99259 99810]) ("svn-status-cleanup" function nil nil [99812 100148]) ("svn-status-resolved" function (:user-visible-flag t) nil [100150 100843]) ("svn-status-svnversion" function (:user-visible-flag t) nil [100846 101526]) ("svn-status-file-modified-after-save-flag" variable (:default-value 109) nil [101753 101947]) ("svn-status-after-save-hook" function nil nil [101948 103852]) ("add-hook" code nil nil [103854 103909]) ("svn-status-get-specific-revision" function (:user-visible-flag t :arguments ("arg")) nil [104107 104442]) ("svn-status-get-specific-revision-internal" function (:arguments ("&optional" "only-actual-file" "arg")) nil [104444 105989]) ("svn-status-ediff-with-revision" function (:user-visible-flag t :arguments ("arg")) nil [105992 106622]) ("svn-ediff-startup-hook" function nil nil [106624 106845]) ("svn-ediff-exit-hook" function (:arguments ("svn-buf" "tmp-bufs")) nil [106847 107321]) ("svn-status-read-revision-string" function (:user-visible-flag t :arguments ("prompt" "&optional" "default-value")) nil [107324 107496]) ("svn-process-kill" function (:user-visible-flag t) nil [107691 107907]) ("svn-process-send-string" function (:user-visible-flag t :arguments ("string" "&optional" "send-passwd")) nil [107909 108474]) ("svn-status-property-list" function nil nil [108668 108962]) ("svn-status-proplist-start" function nil nil [108964 109161]) ("svn-status-property-edit-one-entry" function (:user-visible-flag t :arguments ("arg")) nil [109162 109417]) ("svn-status-property-set" function nil nil [109419 109553]) ("svn-status-property-delete" function nil nil [109555 109690]) ("svn-status-property-parse-property-names" function nil nil [109692 112264]) ("svn-status-property-edit" function (:arguments ("file-info-list" "prop-name" "&optional" "new-prop-value")) nil [112266 113824]) ("svn-status-property-set-property" function (:arguments ("file-info-list" "prop-name" "prop-value")) nil [113826 114259]) ("svn-status-get-directory" function (:arguments ("line-info")) nil [114262 114547]) ("svn-status-get-file-list-per-directory" function (:arguments ("files")) nil [114549 115117]) ("svn-status-property-ignore-file" function nil nil [115119 115907]) ("svn-status-property-ignore-file-extension" function nil nil [115909 116877]) ("svn-status-property-edit-svn-ignore" function nil nil [116879 117317]) ("svn-status-property-set-keyword-list" function (:user-visible-flag t) nil [117320 117580]) ("svn-status-property-set-eol-style" function (:user-visible-flag t) nil [117582 117935]) ("svn-status-property-set-executable" function (:user-visible-flag t) nil [117937 118139]) ("svn-prop-edit-mode-map" variable nil nil [118333 118414]) ("when" code nil nil [118416 118948]) ("easy-menu-define" code nil nil [118950 119362]) ("svn-prop-edit-mode" function (:user-visible-flag t) nil [119364 119700]) ("svn-prop-edit-abort" function nil nil [119702 119838]) ("svn-prop-edit-done" function nil nil [119840 119911]) ("svn-prop-edit-do-it" function (:arguments ("async")) nil [119913 121151]) ("svn-prop-edit-svn-diff" function (:arguments ("arg")) nil [121153 121289]) ("svn-prop-edit-svn-log" function (:arguments ("arg")) nil [121291 121408]) ("svn-prop-edit-svn-status" function nil nil [121410 121513]) ("svn-log-edit-mode-map" variable nil nil [121706 121785]) ("when" code nil nil [121787 122500]) ("easy-menu-define" code nil nil [122502 123115]) ("svn-log-edit-mode" function (:user-visible-flag t) nil [123117 123502]) ("svn-log-edit-abort" function nil nil [123504 123637]) ("svn-log-edit-done" function nil nil [123639 125326]) ("svn-log-edit-svn-diff" function (:user-visible-flag t :arguments ("arg")) nil [125328 125577]) ("svn-log-edit-svn-log" function (:arguments ("arg")) nil [125579 125695]) ("svn-log-edit-svn-status" function nil nil [125697 125799]) ("svn-log-edit-show-files-to-commit" function nil nil [125801 125974]) ("svn-log-edit-save-message" function (:user-visible-flag t) nil [125976 126163]) ("svn-log-edit-erase-edit-buffer" function (:user-visible-flag t) nil [126165 126323]) ("svn-log-edit-insert-files-to-commit" function nil nil [126325 126918]) ("svn-log-edit-remove-comment-lines" function nil nil [126920 127054]) ("svn-log-view-mode-map" variable nil nil [127248 127327]) ("when" code nil nil [127329 127786]) ("easy-menu-define" code nil nil [127788 128038]) ("svn-log-view-font-lock-keywords" variable (:default-value (quote (("^r.+" . font-lock-keyword-face) "Keywords in svn-log-view-mode."))) nil [128040 128154]) ("define-derived-mode" code nil nil [128157 128481]) ("svn-log-view-next" function nil nil [128483 128599]) ("svn-log-view-prev" function nil nil [128601 128720]) ("svn-log-revision-at-point" function nil nil [128722 128854]) ("svn-log-view-diff" function (:user-visible-flag t :arguments ("arg")) nil [128856 129367]) ("svn-log-edit-log-entry" function (:user-visible-flag t) nil [129369 129993]) ("svn-status-base-dir" function nil nil [130197 130719]) ("svn-status-save-state" function nil nil [130721 131263]) ("svn-status-load-state" function (:arguments ("&optional" "no-error")) nil [131265 132199]) ("svn-status-toggle-sort-status-buffer" function (:user-visible-flag t) nil [132201 132706]) ("svn-status-set-trac-project-root" function nil nil [132708 133038]) ("svn-status-set-module-name" function (:user-visible-flag t) nil [133040 133386]) ("svn-trac-browse-timeline" function (:user-visible-flag t) nil [133587 133831]) ("svn-resolve-conflicts-ediff" function (:user-visible-flag t :arguments ("&optional" "name-A" "name-B")) nil [133996 137255]) ("svn-resolve-conflicts" function (:arguments ("filename")) nil [137257 137489]) ("svn-status-resolve-conflicts" function (:user-visible-flag t) nil [137491 137885]) ("svn-status-elp-init" function nil nil [138233 138439]) ("psvn" package nil nil [138442 138457]))
    :file "psvn.el"
    :pointmax 138481
    :unmatched-syntax 'nil
    )
   (semanticdb-table "power-macros.el"
    :major-mode 'emacs-lisp-mode
    :tags 'nil
    :file "power-macros.el"
    :pointmax 2213
    :unmatched-syntax 'nil
    )
   (semanticdb-table "bat-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("bat-mode-map" variable nil nil [1661 1723]) ("bat-mode-comment-start" variable (:default-value "REM ") nil [1760 1836]) ("bat-mode-syntax-table" variable nil nil [1838 1917]) ("if" code nil nil [1919 1988]) ("if" code nil nil [2025 2165]) ("bat-mode" function (:user-visible-flag t) nil [2167 3108]) ("bat-font-lock-keywords" variable (:default-value (list (list "^[@ 	]*\\([rR][eE][mM].*\\)" 1 (quote font-lock-comment-face) t) (list "^[ 	]*\\(::-.*\\)" 1 (quote font-lock-comment-face) t) (list (concat "^[@ 	]*\\(\\<" (mapconcat (quote identity) (quote ("[cC][aA][lL][lL]" "[eE][cC][hH][oO]" "[fF][oO][rR]" "[iI][fF]" "[pP][aA][tT][hH]" "[pP][aA][uU][sS][eE]" "[pP][rR][oO][mM][pP][tT]" "[sS][eE][tT]" "[sS][tT][aA][rR][tT]")) "\\>\\|\\<") "\\>\\)") 1 (quote font-lock-keyword-face)) (list (concat "\\(\\<" (mapconcat (quote identity) (quote ("[eE][xX][iI][sS][tT]" "[eE][rR][rR][oO][rR][lL][eE][vV][eE][lL]" "[gG][oO][tT][oO]" "[nN][oO][tT]")) "\\>\\|\\<") "\\>\\)") 1 (quote font-lock-keyword-face)) (list "^[ 	]*\\(:\\sw+\\)" 1 (quote font-lock-function-name-face) t) (list "\\(%\\sw+%\\)" 1 (quote font-lock-reference-face)) (list "\\(%[0-9]\\)" 1 (quote font-lock-reference-face)) (list "\\(/[^/ 	
]+\\)" 1 (quote font-lock-type-face)) (list "\\<\\([gG][oO][tT][oO]\\)\\>[ 	]*\\(\\sw+\\)?" (quote (1 font-lock-keyword-face)) (quote (2 font-lock-function-name-face nil t))))) nil [3110 4783]) ("if" code nil nil [4814 5013]) ("bat-mode" package nil nil [5015 5034]))
    :file "bat-mode.el"
    :pointmax 5063
    )
   (semanticdb-table "ecmascript-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("font-lock" include nil nil [1309 1329]) ("cc-mode" include nil nil [1330 1348]) ("regexp-opt" include nil nil [1370 1391]) ("ecmascript-mode-version" variable (:constant-flag t :default-value "1.0") nil [1394 1470]) ("defgroup" code nil nil [1472 1585]) ("ecmascript-mode-hook" variable nil nil [1587 1702]) ("ecmascript-mode-map" variable (:default-value (c-make-inherited-keymap)) nil [1704 1804]) ("define-derived-mode" code nil nil [1821 2515]) ("ecmascript-font-lock-default-face" variable (:default-value (quote ecmascript-font-lock-default-face)) nil [2517 2594]) ("ecmascript-font-lock-keywords-1" variable (:constant-flag t :default-value (append java-font-lock-keywords-1 (list (quote ("\\<\\(function\\)\\>\\(?:\\s-+\\(\\sw+\\)\\)?" (1 font-lock-keyword-face) (2 font-lock-function-name-face nil t))) (quote ("\\<\\(var\\)\\>\\(?:\\s-+\\(\\sw+\\)\\)?" (1 font-lock-keyword-face) (2 font-lock-variable-name-face nil t)))))) nil [2596 3053]) ("ecmascript-font-lock-keywords-2" variable (:constant-flag t :default-value (append java-font-lock-keywords-2 ecmascript-font-lock-keywords-1 (list "\\<\\(debugger\\|delete\\|export\\|in\\|typeof\\|with\\)\\>" (list (concat "\\<\\(" (mapconcat (quote identity) java-font-lock-extra-types nil) "\\)\\>\\.") (quote (1 font-lock-type-face nil t))) (quote ("\\<\\(void\\)\\>\\(?:\\s-+\\(\\sw+\\)\\)?" (1 font-lock-keyword-face t) (2 ecmascript-font-lock-default-face t t))) (quote ("\\<\\(Infinity\\|NaN\\|undefined\\)\\>" 0 font-lock-constant-face t)) (list (concat "\\<Number\\." (regexp-opt (quote ("MAX_VALUE" "MIN_VALUE" "NaN" "NEGATIVE_INFINITY" "POSITIVE_INFINITY")) t) "\\>") (quote (1 font-lock-constant-face))) (list (concat "\\<Math\\." (regexp-opt (quote ("E" "LN10" "LN2" "LOG2E" "LOG10E" "PI" "SQRT1_2" "SQRT2")) t) "\\>") (quote (1 font-lock-constant-face)))))) nil [3055 4375]) ("ecmascript-font-lock-keywords-3" variable (:constant-flag t :default-value (append java-font-lock-keywords-3 ecmascript-font-lock-keywords-2 (list (quote ("\\<Date\\.\\(parse\\|UTC\\)\\>" 1 font-lock-builtin-face)) (list (concat "\\<Math\\." (regexp-opt (quote ("abs" "acos" "asin" "atan" "atan2" "ceil" "cos" "exp" "floor" "log" "max" "min" "pow" "random" "round" "sin" "sqrt" "tan")) t) "\\>") (quote (1 font-lock-builtin-face))) (list (regexp-opt (quote ("decodeURI" "decodeURIComponent" "encodeURI" "encodeURIComponent" "eval" "isFinite" "isNaN" "parseFloat" "parseInt")) (quote words)) (quote (0 font-lock-builtin-face))) (list (concat "\\." (regexp-opt (quote ("hasOwnProperty" "isPrototypeOf" "propertyIsEnumerable" "toLocaleString" "toString" "valueOf" "apply" "call" "concat" "join" "pop" "push" "reverse" "shift" "slice" "sort" "splice" "unshift" "charAt" "charCodeAt" "fromCharCode" "indexOf" "lastIndexOf" "localeCompare" "match" "replace" "search" "split" "substring" "toLocaleLowerCase" "toLocaleUpperCase" "toLowerCase" "toUpperCase" "toExponential" "toFixed" "toPrecision" "getDate" "getDay" "getFullYear" "getHours" "getMilliseconds" "getMinutes" "getMonth" "getSeconds" "getTime" "getTimezoneOffset" "getUTCDate" "getUTCDay" "getUTCFullYear" "getUTCHours" "getUTCMilliseconds" "getUTCMinutes" "getUTCMonth" "getUTCSeconds" "setDate" "setFullYear" "setHours" "setMilliseconds" "setMinutes" "setMonth" "setSeconds" "setTime" "setUTCDate" "setUTCFullYear" "setUTCHours" "setUTCMilliseconds" "setUTCMinutes" "setUTCMonth" "setUTCSeconds" "toDateString" "toLocaleDateString" "toLocaleString" "toLocaleTimeString" "toTimeString" "toUTCString" "exec" "test")) t) "\\>") (quote (1 font-lock-builtin-face))) (make-face-bold (quote font-lock-builtin-face))))) nil [4377 7198]) ("ecmascript-mode" package nil nil [7200 7226]))
    :file "ecmascript-mode.el"
    :pointmax 7261
    :unmatched-syntax 'nil
    )
   (semanticdb-table "python-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("py-version" variable (:constant-flag t :default-value "$Revision: 4.67 $") nil [333 408]) ("comint" include nil nil [3202 3219]) ("custom" include nil nil [3220 3237]) ("cl" include nil nil [3238 3251]) ("compile" include nil nil [3252 3270]) ("defgroup" code nil nil [3367 3498]) ("py-python-command" variable (:user-visible-flag t :default-value "python") nil [3500 3624]) ("make-obsolete-variable" code nil nil [3626 3689]) ("py-jython-command" variable (:user-visible-flag t :default-value "jython") nil [3690 3842]) ("py-default-interpreter" variable (:user-visible-flag t :default-value (quote cpython)) nil [3844 4622]) ("py-python-command-args" variable (:user-visible-flag t :default-value (quote ("-i"))) nil [4624 4779]) ("make-obsolete-variable" code nil nil [4781 4854]) ("py-jython-command-args" variable (:user-visible-flag t :default-value (quote ("-i"))) nil [4855 5039]) ("py-indent-offset" variable (:user-visible-flag t :default-value 4) nil [5041 5261]) ("py-continuation-offset" variable (:user-visible-flag t :default-value 4) nil [5263 5575]) ("py-smart-indentation" variable (:user-visible-flag t :default-value t) nil [5577 6606]) ("py-align-multiline-strings-p" variable (:user-visible-flag t :default-value t) nil [6608 7013]) ("py-block-comment-prefix" variable (:user-visible-flag t :default-value "##") nil [7015 7437]) ("py-honor-comment-indentation" variable (:user-visible-flag t :default-value t) nil [7439 8411]) ("py-temp-directory" variable (:user-visible-flag t :default-value (let ((ok (quote (lambda (x) (and x (setq x (expand-file-name x)) (file-directory-p x) (file-writable-p x) x))))) (or (funcall ok (getenv "TMPDIR")) (funcall ok "/usr/tmp") (funcall ok "/tmp") (funcall ok "/var/tmp") (funcall ok ".") (error "Couldn't find a usable temp directory -- set `py-temp-directory'")))) nil [8413 9105]) ("py-beep-if-tab-change" variable (:user-visible-flag t :default-value t) nil [9107 9600]) ("py-jump-on-exception" variable (:user-visible-flag t :default-value t) nil [9602 9916]) ("py-ask-about-save" variable (:default-value t) nil [9918 10117]) ("py-backspace-function" variable (:user-visible-flag t :default-value (quote backward-delete-char-untabify)) nil [10119 10291]) ("py-delete-function" variable (:user-visible-flag t :default-value (quote delete-char)) nil [10293 10440]) ("py-imenu-show-method-args-p" variable (:user-visible-flag t) nil [10442 10636]) ("make-variable-buffer-local" code nil nil [10637 10683]) ("py-pdbtrack-do-tracking-p" variable (:user-visible-flag t :default-value t) nil [10685 11142]) ("make-variable-buffer-local" code nil nil [11143 11198]) ("py-pdbtrack-minor-mode-string" variable (:user-visible-flag t :default-value " PDB") nil [11200 11349]) ("py-import-check-point-max" variable (:default-value 20000) nil [11351 11762]) ("make-obsolete-variable" code nil nil [11764 11829]) ("py-jython-packages" variable (:default-value (quote ("java" "javax" "org" "com"))) nil [11830 11982]) ("py-master-file" variable nil nil [12006 12517]) ("make-variable-buffer-local" code nil nil [12518 12562]) ("py-pychecker-command" variable (:user-visible-flag t :default-value "pychecker") nil [12564 12710]) ("py-pychecker-command-args" variable (:user-visible-flag t :default-value (quote ("--stdlib"))) nil [12712 12894]) ("py-shell-alist" variable (:user-visible-flag t :default-value (quote (("jython" quote jython) ("python" quote cpython)))) nil [12896 13105]) ("py-name-buffers-with-packages" variable (:default-value (quote always)) nil [13107 13900]) ("py-line-number-offset" variable nil nil [14018 14310]) ("py-emacs-features" variable (:constant-flag t :default-value (let (features) features)) nil [14312 14543]) ("py-pseudo-keyword-face" variable (:default-value (quote py-pseudo-keyword-face)) nil [14595 14729]) ("make-face" code nil nil [14730 14765]) ("py-decorators-face" variable (:default-value (quote py-decorators-face)) nil [14789 14864]) ("make-face" code nil nil [14865 14896]) ("py-builtins-face" variable (:default-value (quote py-builtins-face)) nil [14919 15024]) ("make-face" code nil nil [15025 15054]) ("py-font-lock-mode-hook" function nil nil [15056 15453]) ("add-hook" code nil nil [15454 15509]) ("python-font-lock-keywords" variable (:default-value (let ((kw1 (mapconcat (quote identity) (quote ("and" "assert" "break" "class" "continue" "def" "del" "elif" "else" "except" "exec" "for" "from" "global" "if" "import" "in" "is" "lambda" "not" "or" "pass" "print" "raise" "return" "while" "yield")) "\\|")) (kw2 (mapconcat (quote identity) (quote ("else:" "except:" "finally:" "try:")) "\\|")) (kw3 (mapconcat (quote identity) (quote ("__debug__" "__import__" "__name__" "abs" "apply" "basestring" "bool" "buffer" "callable" "chr" "classmethod" "cmp" "coerce" "compile" "complex" "copyright" "delattr" "dict" "dir" "divmod" "enumerate" "eval" "execfile" "exit" "file" "filter" "float" "getattr" "globals" "hasattr" "hash" "hex" "id" "input" "int" "intern" "isinstance" "issubclass" "iter" "len" "license" "list" "locals" "long" "map" "max" "min" "object" "oct" "open" "ord" "pow" "property" "range" "raw_input" "reduce" "reload" "repr" "round" "setattr" "slice" "staticmethod" "str" "sum" "super" "tuple" "type" "unichr" "unicode" "vars" "xrange" "zip")) "\\|")) (kw4 (mapconcat (quote identity) (quote ("ArithmeticError" "AssertionError" "AttributeError" "DeprecationWarning" "EOFError" "EnvironmentError" "Exception" "FloatingPointError" "FutureWarning" "IOError" "ImportError" "IndentationError" "IndexError" "KeyError" "KeyboardInterrupt" "LookupError" "MemoryError" "NameError" "NotImplemented" "NotImplementedError" "OSError" "OverflowError" "OverflowWarning" "PendingDeprecationWarning" "ReferenceError" "RuntimeError" "RuntimeWarning" "StandardError" "StopIteration" "SyntaxError" "SyntaxWarning" "SystemError" "SystemExit" "TabError" "TypeError" "UnboundLocalError" "UnicodeDecodeError" "UnicodeEncodeError" "UnicodeError" "UnicodeTranslateError" "UserWarning" "ValueError" "Warning" "ZeroDivisionError")) "\\|"))) (list (quote ("^[ 	]*\\(@.+\\)" 1 (quote py-decorators-face))) (cons (concat "\\b\\(" kw1 "\\)\\b[ 
	(]") 1) (list (concat "\\([^. 	]\\|^\\)[ 	]*\\b\\(" kw3 "\\)\\b[ 
	(]") 2 (quote py-builtins-face)) (cons (concat "\\b\\(" kw2 "\\)[ 
	(]") 1) (list (concat "\\b\\(" kw4 "\\)[ 
	:,(]") 1 (quote py-builtins-face)) (quote ("[ 	]*\\(\\bfrom\\b.*\\)?\\bimport\\b.*\\b\\(as\\)\\b" . 2)) (quote ("\\bclass[ 	]+\\([a-zA-Z_]+[a-zA-Z0-9_]*\\)" 1 font-lock-type-face)) (quote ("\\bdef[ 	]+\\([a-zA-Z_]+[a-zA-Z0-9_]*\\)" 1 font-lock-function-name-face)) (quote ("\\b\\(self\\|None\\|True\\|False\\|Ellipsis\\)\\b" 1 py-pseudo-keyword-face))))) nil [15511 18733]) ("put" code nil nil [18734 18801]) ("py-file-queue" variable nil nil [18871 18998]) ("py-pdbtrack-is-tracking-p" variable nil nil [19000 19038]) ("py-pychecker-history" variable nil nil [19040 19073]) ("py-stringlit-re" variable (:constant-flag t :default-value (concat "[rR]?'''[^']*\\(\\('[^']\\|''[^']\\)[^']*\\)*'''" "\\|" "[rR]?\"\"\"[^\"]*\\(\\(\"[^\"]\\|\"\"[^\"]\\)[^\"]*\\)*\"\"\"" "\\|" "[rR]?'\\([^'
\\]\\|\\\\.\\)*'" "\\|" "[rR]?\"\\([^\"
\\]\\|\\\\.\\)*\"")) nil [19092 19869]) ("py-continued-re" variable (:constant-flag t :default-value (concat "\\(" "[^#'\"
\\]" "\\|" py-stringlit-re "\\)*" "\\\\$")) nil [19871 20142]) ("py-blank-or-comment-re" variable (:constant-flag t :default-value "[ 	]*\\($\\|#\\)") nil [20146 20256]) ("py-outdent-re" variable (:constant-flag t :default-value (concat "\\(" (mapconcat (quote identity) (quote ("else:" "except\\(\\s +.*\\)?:" "finally:" "elif\\s +.*:")) "\\|") "\\)")) nil [20258 20502]) ("py-block-closing-keywords-re" variable (:constant-flag t :default-value "\\(return\\|raise\\|break\\|continue\\|pass\\)") nil [20506 20668]) ("py-no-outdent-re" variable (:constant-flag t :default-value (concat "\\(" (mapconcat (quote identity) (list "try:" "except\\(\\s +.*\\)?:" "while\\s +.*:" "for\\s +.*:" "if\\s +.*:" "elif\\s +.*:" (concat py-block-closing-keywords-re "[ 	
]")) "\\|") "\\)")) nil [20670 21017]) ("py-traceback-line-re" variable (:constant-flag t :default-value "[ 	]+File \"\\([^\"]+\\)\", line \\([0-9]+\\)") nil [21019 21151]) ("py-pdbtrack-stack-entry-regexp" variable (:constant-flag t :default-value "^> \\(.*\\)(\\([0-9]+\\))\\([?a-zA-Z0-9_]+\\)()") nil [21175 21390]) ("py-pdbtrack-input-prompt" variable (:constant-flag t :default-value "
[(<]*[Pp]db[>)]+ ") nil [21392 21513]) ("py-pdbtrack-track-range" variable (:constant-flag t :default-value 10000) nil [21515 21630]) ("python-mode-abbrev-table" variable nil nil [21731 21818]) ("define-abbrev-table" code nil nil [21819 21870]) ("python-mode-hook" variable (:user-visible-flag t) nil [21872 21936]) ("make-obsolete-variable" code nil nil [21938 21999]) ("jython-mode-hook" variable (:user-visible-flag t) nil [22000 22109]) ("py-shell-hook" variable (:user-visible-flag t) nil [22111 22169]) ("and" code nil nil [22304 22405]) ("py-mode-map" variable nil nil [22407 22472]) ("if" code nil nil [22473 26525]) ("py-mode-output-map" variable nil nil [26527 26602]) ("if" code nil nil [26603 27113]) ("py-shell-map" variable nil nil [27115 27183]) ("if" code nil nil [27184 27425]) ("py-mode-syntax-table" variable nil nil [27427 27508]) ("when" code nil nil [27509 29640]) ("py-dotted-expression-syntax-table" variable nil nil [29741 29848]) ("when" code nil nil [29849 30110]) ("py-safe" function (:arguments ("&rest" "body")) nil [30128 30283]) ("py-keep-region-active" function nil nil [30285 30597]) ("py-point" function (:arguments ("position")) nil [30599 31640]) ("py-highlight-line" function (:arguments ("from" "to" "file" "line")) nil [31642 31999]) ("py-in-literal" function (:arguments ("&optional" "lim")) nil [32001 32523]) ("py-fast-in-literal" function (:arguments ("&optional" "lim")) nil [32627 32838]) ("if" code nil nil [32840 32930]) ("py-menu" variable nil nil [33072 33256]) ("and" code nil nil [33258 34394]) ("py-imenu-class-regexp" variable (:default-value (concat "\\(" "^[ 	]*" "\\(class[ 	]+[a-zA-Z0-9_]+\\)" "\\([ 	]*\\((\\([a-zA-Z0-9_,. 	
]\\)*)\\)?\\)" "[ 	]*:" "\\)")) nil [34420 34808]) ("py-imenu-method-regexp" variable (:default-value (concat "\\(" "^[ 	]*" "\\(def[ 	]+" "\\([a-zA-Z0-9_]+\\)" "[ 	]*(\\([^:#]*\\))" "\\)" "[ 	]*:" "\\)")) nil [34810 35528]) ("py-imenu-method-no-arg-parens" variable (:default-value (quote (2 8))) nil [35530 35808]) ("py-imenu-method-arg-parens" variable (:default-value (quote (2 7))) nil [35810 36078]) ("py-imenu-generic-expression" variable (:default-value (cons (concat py-imenu-class-regexp "\\|" py-imenu-method-regexp) py-imenu-method-no-arg-parens)) nil [36228 36635]) ("py-imenu-generic-regexp" variable nil nil [36803 36839]) ("py-imenu-generic-parens" variable nil nil [36840 36876]) ("py-imenu-create-index-function" function nil nil [36879 37577]) ("py-imenu-create-index-engine" function (:arguments ("&optional" "start-indent")) nil [37579 41491]) ("py-choose-shell-by-shebang" function nil nil [41496 42337]) ("py-choose-shell-by-import" function nil nil [42342 42899]) ("py-choose-shell" function (:user-visible-flag t) nil [42903 43437]) ("python-mode" function (:user-visible-flag t) nil [43456 46979]) ("make-obsolete" code nil nil [46982 47024]) ("jython-mode" function (:user-visible-flag t) nil [47025 47382]) ("let" code nil nil [47680 47909]) ("when" code nil nil [47925 48075]) ("py-outdent-p" function nil nil [48103 48556]) ("py-electric-colon" function (:user-visible-flag t :arguments ("arg")) nil [48558 49888]) ("py-package-containing-file" function (:arguments ("file")) nil [49943 50446]) ("py-name-followed-by-package" function (:arguments ("file")) nil [50448 50863]) ("py-file-name-handler" function (:arguments ("operation" "&rest" "args")) nil [50917 52293]) ("add-to-list" code nil nil [52407 52480]) ("py-execute-file" function (:arguments ("proc" "filename")) nil [52527 53256]) ("py-comint-output-filter-function" function (:arguments ("string")) nil [53258 53911]) ("py-pdbtrack-overlay-arrow" function (:arguments ("activation")) nil [53913 54397]) ("py-pdbtrack-track-stack-file" function (:arguments ("text")) nil [54399 56864]) ("py-pdbtrack-get-source-buffer" function (:arguments ("block")) nil [56866 58641]) ("py-pdbtrack-grub-for-buffer" function (:arguments ("funcname" "lineno")) nil [58643 59619]) ("py-postprocess-output-buffer" function (:arguments ("buf")) nil [59621 60218]) ("py-serial-number" variable nil nil [60310 60337]) ("py-exception-buffer" variable nil nil [60338 60370]) ("py-output-buffer" variable (:constant-flag t :default-value "*Python Output*") nil [60371 60416]) ("make-variable-buffer-local" code nil nil [60417 60463]) ("py-which-shell" variable nil nil [60508 60535]) ("py-which-args" variable (:default-value py-python-command-args) nil [60536 60582]) ("py-which-bufname" variable (:default-value "Python") nil [60583 60617]) ("make-variable-buffer-local" code nil nil [60618 60662]) ("make-variable-buffer-local" code nil nil [60663 60706]) ("make-variable-buffer-local" code nil nil [60707 60753]) ("py-toggle-shells" function (:user-visible-flag t :arguments ("arg")) nil [60755 61975]) ("py-shell" function (:user-visible-flag t :arguments ("&optional" "argprompt")) nil [61992 65066]) ("py-clear-queue" function (:user-visible-flag t) nil [65068 65320]) ("py-execute-region" function (:user-visible-flag t :arguments ("start" "end" "&optional" "async")) nil [65324 69732]) ("py-execute-buffer" function (:user-visible-flag t :arguments ("&optional" "async")) nil [69763 70546]) ("py-execute-import-or-reload" function (:user-visible-flag t :arguments ("&optional" "async")) nil [70548 72390]) ("py-execute-def-or-class" function (:user-visible-flag t :arguments ("&optional" "async")) nil [72393 72830]) ("py-execute-string" function (:user-visible-flag t :arguments ("string" "&optional" "async")) nil [72833 73349]) ("py-jump-to-exception" function (:arguments ("file" "line")) nil [73354 74250]) ("py-mouseto-exception" function (:user-visible-flag t :arguments ("event")) nil [74252 74813]) ("py-goto-exception" function (:user-visible-flag t) nil [74815 75182]) ("py-find-next-exception" function (:arguments ("start" "buffer" "searchdir" "errwhere")) nil [75184 75958]) ("py-down-exception" function (:user-visible-flag t :arguments ("&optional" "bottom")) nil [75960 76453]) ("py-up-exception" function (:user-visible-flag t :arguments ("&optional" "top")) nil [76455 76930]) ("py-electric-backspace" function (:user-visible-flag t :arguments ("arg")) nil [76955 79090]) ("py-electric-delete" function (:user-visible-flag t :arguments ("arg")) nil [79093 79996]) ("put" code nil nil [80043 80087]) ("put" code nil nil [80096 80140]) ("put" code nil nil [80154 80211]) ("put" code nil nil [80220 80277]) ("put" code nil nil [80291 80348]) ("put" code nil nil [80357 80414]) ("py-indent-line" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [80432 81607]) ("py-newline-and-indent" function (:user-visible-flag t) nil [81609 82220]) ("py-compute-indentation" function (:arguments ("honor-block-close-p")) nil [82222 89431]) ("py-guess-indent-offset" function (:user-visible-flag t :arguments ("&optional" "global")) nil [89433 91792]) ("py-comment-indent-function" function nil nil [91794 92373]) ("py-narrow-to-defun" function (:user-visible-flag t :arguments ("&optional" "class")) nil [92375 92794]) ("py-shift-region" function (:arguments ("start" "end" "count")) nil [92798 93085]) ("py-shift-region-left" function (:user-visible-flag t :arguments ("start" "end" "&optional" "count")) nil [93087 94180]) ("py-shift-region-right" function (:user-visible-flag t :arguments ("start" "end" "&optional" "count")) nil [94182 94917]) ("py-indent-region" function (:user-visible-flag t :arguments ("start" "end" "&optional" "indent-offset")) nil [94919 98087]) ("py-comment-region" function (:user-visible-flag t :arguments ("beg" "end" "&optional" "arg")) nil [98089 98314]) ("py-previous-statement" function (:user-visible-flag t :arguments ("count")) nil [98348 99044]) ("py-next-statement" function (:user-visible-flag t :arguments ("count")) nil [99046 99735]) ("py-goto-block-up" function (:user-visible-flag t :arguments ("&optional" "nomark")) nil [99737 101164]) ("py-beginning-of-def-or-class" function (:user-visible-flag t :arguments ("&optional" "class" "count")) nil [101166 102936]) ("defalias" code nil nil [102965 103039]) ("py-end-of-def-or-class" function (:user-visible-flag t :arguments ("&optional" "class" "count")) nil [103041 105207]) ("defalias" code nil nil [105236 105298]) ("py-mark-block" function (:user-visible-flag t :arguments ("&optional" "extend" "just-move")) nil [105335 110179]) ("py-mark-def-or-class" function (:user-visible-flag t :arguments ("&optional" "class")) nil [110181 113336]) ("py-forward-into-nomenclature" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [113361 113994]) ("py-backward-into-nomenclature" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [113996 114355]) ("py-pdbtrack-toggle-stack-tracking" function (:arguments ("arg")) nil [114382 114907]) ("turn-on-pdbtrack" function nil nil [114909 114992]) ("turn-off-pdbtrack" function nil nil [114994 115078]) ("py-pychecker-run" function (:user-visible-flag t :arguments ("command")) nil [115096 115976]) ("py-symbol-near-point" function nil nil [116338 116959]) ("py-help-at-point" function (:user-visible-flag t) nil [116961 117588]) ("py-dump-help-string" function (:arguments ("str")) nil [117839 119271]) ("py-describe-mode" function (:user-visible-flag t) nil [119273 129624]) ("info-look" include nil nil [129626 129646]) ("when" code nil nil [129760 130084]) ("py-parse-state-re" variable (:default-value (concat "^[ 	]*\\(elif\\|else\\|while\\|def\\|class\\)\\>" "\\|" "^[^ #	
]")) nil [130108 130225]) ("py-parse-state" function nil nil [130227 131549]) ("py-nesting-level" function nil nil [131551 131799]) ("py-backslash-continuation-line-p" function nil nil [131826 132311]) ("py-continuation-line-p" function nil nil [132313 132507]) ("py-goto-beginning-of-tqs" function (:arguments ("delim")) nil [132509 133128]) ("py-goto-initial-line" function nil nil [133130 134073]) ("py-goto-beyond-final-line" function nil nil [134075 135039]) ("py-statement-opens-block-p" function nil nil [135041 136065]) ("py-statement-closes-block-p" function nil nil [136067 136454]) ("py-goto-beyond-block" function nil nil [136456 136850]) ("py-goto-statement-at-or-above" function nil nil [136852 137408]) ("py-goto-statement-below" function nil nil [137410 137913]) ("py-go-up-tree-to-keyword" function (:arguments ("key")) nil [137915 138936]) ("py-suck-up-leading-text" function nil nil [138938 139243]) ("py-suck-up-first-keyword" function nil nil [139245 139590]) ("py-current-defun" function nil nil [139592 141076]) ("py-help-address" variable (:constant-flag t :default-value "python-mode@python.org") nil [141081 141181]) ("py-version" function (:user-visible-flag t) nil [141183 141367]) ("py-submit-bug-report" function (:user-visible-flag t :arguments ("enhancement-p")) nil [141443 142569]) ("py-kill-emacs-hook" function nil nil [142573 142782]) ("add-hook" code nil nil [142832 142879]) ("add-hook" code nil nil [142880 142952]) ("or" code nil nil [143000 143145]) ("py-fill-comment" function (:arguments ("&optional" "justify")) nil [143284 145417]) ("py-fill-string" function (:arguments ("start" "&optional" "justify")) nil [145420 147502]) ("py-fill-paragraph" function (:user-visible-flag t :arguments ("&optional" "justify")) nil [147504 148707]) ("python-mode" package nil nil [148712 148734]))
    :file "python-mode.el"
    :pointmax 148764
    )
   (semanticdb-table "gnuserv.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("gnuserv-rcs-header-id" variable (:constant-flag t :default-value "$Header: gnuserv.el,v 2.1 95/02/16 12:00:16 arup alpha $") nil [2327 2418]) ("if" code nil nil [2520 2669]) ("gnuserv-frame" variable (:user-visible-flag t) nil [2671 2886]) ("server-done-function" variable (:user-visible-flag t :default-value (quote kill-buffer)) nil [2888 3081]) ("server-program" variable (:user-visible-flag t :default-value "gnuserv") nil [3083 3159]) ("server-process" variable nil nil [3161 3220]) ("server-string" variable nil nil [3222 3289]) ("current-client" variable nil nil [3291 3361]) ("server-clients" variable nil nil [3363 3609]) ("server-buffer-clients" variable nil nil [3611 3722]) ("make-variable-buffer-local" code nil nil [3724 3775]) ("setq-default" code nil nil [3776 3816]) ("or" code nil nil [3817 3961]) ("server-log" function (:arguments ("string")) nil [3963 4208]) ("server-sentinel" function (:arguments ("proc" "msg")) nil [4211 4431]) ("server-process-display-error" function (:arguments ("string")) nil [4434 4754]) ("server-process-filter" function (:arguments ("proc" "string")) nil [4757 5737]) ("server-release-outstanding-buffers" function (:user-visible-flag t) nil [5740 6006]) ("gnuserv-start" function (:user-visible-flag t :arguments ("&optional" "leave-dead")) nil [6063 7180]) ("fset" code nil nil [7257 7302]) ("server-write-to-client" function (:arguments ("client" "form")) nil [7305 7650]) ("server-eval" function (:arguments ("form")) nil [7652 7807]) ("server-eval-quickly" function (:arguments ("form")) nil [7810 8055]) ("server-make-window-visible" function nil nil [8058 8719]) ("server-find-file" function (:arguments ("file")) nil [8722 10350]) ("server-edit-files-quickly" function (:arguments ("list")) nil [10388 10872]) ("server-edit-files" function (:arguments ("list")) nil [10875 11908]) ("server-get-buffer" function (:arguments ("buffer")) nil [11911 12330]) ("server-kill-buffer" function (:user-visible-flag t :arguments ("buffer")) nil [12332 13318]) ("server-kill-all-local-variables" function nil nil [13321 13725]) ("or" code nil nil [13728 13832]) ("fset" code nil nil [13834 13873]) ("or" code nil nil [13875 14023]) ("fset" code nil nil [14025 14090]) ("server-buffer-done" function (:arguments ("buffer")) nil [14093 14918]) ("mh-draft-p" function (:arguments ("buffer")) nil [14921 15183]) ("server-done" function nil nil [15186 15733]) ("server-edit" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [15736 17010]) ("server-switch-buffer" function (:arguments ("next-buffer")) nil [17012 17637]) ("global-set-key" code nil nil [17639 17676]) ("gnuserv" package nil nil [17678 17696]))
    :file "gnuserv.el"
    :pointmax 17698
    )
   (semanticdb-table "no-word.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("defgroup" code nil nil [2321 2430]) ("no-word-ask-coding" variable (:default-value t) nil [2432 2581]) ("no-word-check-word" variable nil nil [2584 2790]) ("no-word-rename-buffer" variable (:default-value t) nil [2793 3002]) ("no-word-default-coding" variable (:default-value "iso-8859-1") nil [3005 3227]) ("no-word-coding-systems" variable (:default-value (quote (("greek-iso-8bit" "8859-7.txt") ("iso-8859-7" "8859-7.txt") ("iso-8859-1" "8859-1.txt")))) nil [3230 3652]) ("no-word-text-width" variable (:default-value 78) nil [3654 3807]) ("no-word-show-hidden" variable nil nil [3809 3961]) ("defgroup" code nil nil [3963 4045]) ("no-word-ps-papersize" variable (:default-value "a4") nil [4047 4273]) ("no-word-ps-landscape" variable nil nil [4275 4428]) ("no-word-ps-landscape" variable nil nil [4430 4583]) ("no-word-ps-image-level" variable (:default-value 2) nil [4585 4743]) ("no-word-command" function (:arguments ("map-file" "&optional" "file")) nil [4748 4978]) ("no-word-is-word" function nil nil [4980 5261]) ("no-word" function (:arguments ("&optional" "file")) nil [5263 6357]) ("no-word-find-file" function (:user-visible-flag t :arguments ("file")) nil [6359 6538]) ("no-word-gv-find-file" function (:user-visible-flag t :arguments ("file")) nil [6540 7394]) ("no-word" package nil nil [7397 7415]))
    :file "no-word.el"
    :pointmax 7440
    )
   (semanticdb-table "rst-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("defgroup" code nil nil [2262 2441]) ("rst-mode-hook" variable nil nil [2443 2592]) ("rst-mode-lazy" variable (:user-visible-flag t :default-value t) nil [2594 3025]) ("defgroup" code nil nil [3108 3205]) ("rst-block-face" variable (:default-value (quote font-lock-keyword-face)) nil [3207 3335]) ("rst-external-face" variable (:default-value (quote font-lock-type-face)) nil [3337 3460]) ("rst-definition-face" variable (:default-value (quote font-lock-function-name-face)) nil [3462 3593]) ("rst-directive-face" variable (:default-value (if (boundp (quote font-lock-builtin-face)) (quote font-lock-builtin-face) (quote font-lock-preprocessor-face))) nil [3595 3815]) ("rst-comment-face" variable (:default-value (quote font-lock-comment-face)) nil [3817 3918]) ("rst-emphasis1-face" variable (:default-value (if (facep (quote italic)) (quote (quote italic)) (quote italic))) nil [3920 4082]) ("rst-emphasis2-face" variable (:default-value (if (facep (quote bold)) (quote (quote bold)) (quote bold))) nil [4084 4240]) ("rst-literal-face" variable (:default-value (quote font-lock-string-face)) nil [4242 4346]) ("rst-reference-face" variable (:default-value (quote font-lock-variable-name-face)) nil [4348 4475]) ("rst-level-face-max" variable (:constant-flag t :default-value 6) nil [4622 4694]) ("rst-level-face-base-color" variable (:constant-flag t :default-value "grey") nil [4695 4793]) ("rst-level-face-base-light" variable (:constant-flag t :default-value 85) nil [4794 4877]) ("rst-level-face-format-light" variable (:constant-flag t :default-value "%2d") nil [4878 4981]) ("rst-level-face-step-light" variable (:constant-flag t :default-value -7) nil [4982 5062]) ("let" code nil nil [5084 5577]) ("rst-adornment-faces-alist" variable (:default-value (quote ((1 . rst-level-1-face) (2 . rst-level-2-face) (3 . rst-level-3-face) (4 . rst-level-4-face) (5 . rst-level-5-face) (6 . rst-level-6-face) (t . font-lock-keyword-face) (nil . font-lock-keyword-face)))) nil [5579 6197]) ("rst-mode-syntax-table" variable nil nil [6344 6419]) ("unless" code nil nil [6421 7272]) ("rst-mode-abbrev-table" variable nil nil [7274 7348]) ("define-abbrev-table" code nil nil [7349 7396]) ("rst-mode-map" variable nil nil [7587 7667]) ("unless" code nil nil [7669 7740]) ("rst-mode" function (:user-visible-flag t) nil [7742 10121]) ("rst-font-lock-keywords-function" function nil nil [10217 17289]) ("rst-forward-indented-block" function (:user-visible-flag t :arguments ("&optional" "column" "limit")) nil [17391 18576]) ("rst-font-lock-indentation-point" variable nil nil [18966 19010]) ("rst-font-lock-find-unindented-line" function (:arguments ("limit")) nil [19012 20062]) ("rst-font-lock-adornment-point" variable nil nil [20277 20319]) ("rst-font-lock-level" variable nil nil [20438 20470]) ("rst-adornment-level-alist" variable nil nil [20903 21302]) ("rst-adornment-level" function (:arguments ("key" "&optional" "add")) nil [21453 21834]) ("rst-classify-adornment" function (:arguments ("adornment" "end" "limit")) nil [22593 24150]) ("rst-font-lock-handle-adornment" function (:arguments ("limit")) nil [24404 24850]))
    :file "rst-mode.el"
    :pointmax 24959
    )
   (semanticdb-table "w32-winprint.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("if" code nil nil [1983 8503]))
    :file "w32-winprint.el"
    :pointmax 8541
    )
   (semanticdb-table "htmlize.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [3634 3647]) ("when" code nil nil [3872 4078]) ("global-font-lock-mode" variable nil nil [3839 3869]) ("font-lock-support-mode" variable nil nil [3805 3836]) ("font-lock-auto-fontify" variable nil nil [3771 3802]) ("if" code nil nil [3669 3768]) ("htmlize-version" variable (:constant-flag t :default-value "1.16") nil [4081 4114]) ("if" code nil nil [4303 4818]) ("condition-case" code nil nil [4241 4300]) ("defgroup" code nil nil [4821 4907]) ("htmlize-head-tags" variable (:user-visible-flag t) nil [4909 5045]) ("htmlize-output-type" variable (:user-visible-flag t :default-value (quote css)) nil [5047 5718]) ("htmlize-generate-hyperlinks" variable (:user-visible-flag t :default-value t) nil [5720 6062]) ("htmlize-hyperlink-style" variable (:user-visible-flag t :default-value "      a {
        color: inherit;
        background-color: inherit;
        font: inherit;
        text-decoration: inherit;
      }
      a:hover {
        text-decoration: underline;
      }
") nil [6064 6389]) ("htmlize-html-charset" variable (:user-visible-flag t) nil [6391 7479]) ("htmlize-convert-nonascii-to-entities" variable (:user-visible-flag t :default-value (featurep (quote mule))) nil [7481 9226]) ("htmlize-css-name-prefix" variable (:user-visible-flag t) nil [9228 9608]) ("htmlize-use-rgb-txt" variable (:user-visible-flag t :default-value t) nil [9610 10369]) ("htmlize-html-major-mode" variable nil nil [10371 10681]) ("htmlize-before-hook" variable nil nil [10683 10836]) ("htmlize-after-hook" variable nil nil [10838 11058]) ("htmlize-file-hook" variable nil nil [11060 11167]) ("htmlize-running-xemacs" variable (:constant-flag t :default-value (string-match "XEmacs" emacs-version)) nil [11339 11410]) ("unless" code nil nil [12367 12723]) ("unless" code nil nil [12211 12364]) ("unless" code nil nil [12000 12208]) ("cond" code nil nil [13457 14864]) ("htmlize-basic-character-table" variable (:default-value (let ((table (make-vector 128 0))) (dotimes (i 128) (setf (aref table i) (if (and (>= i 32) (<= i 126)) (char-to-string i) (format "&#%d;" i)))) (setf (aref table 10) "
" (aref table 13) "" (aref table 9) "	" (aref table 38) "&amp;" (aref table 60) "&lt;" (aref table 62) "&gt;") table)) nil [14938 15854]) ("htmlize-extended-character-cache" variable (:default-value (make-hash-table :test (quote eq))) nil [16439 16508]) ("htmlize-protect-string" function (:arguments ("string")) nil [16510 17934]) ("htmlize-buffer-substring-no-invisible" function (:arguments ("beg" "end")) nil [17936 18833]) ("htmlize-tab-spaces" variable (:constant-flag t :default-value (let ((v (make-vector 32 nil))) (dotimes (i (length v)) (setf (aref v i) (make-string i 32))) v)) nil [18835 19102]) ("htmlize-untabify" function (:arguments ("text" "start-column")) nil [19104 20514]) ("htmlize-despam-address" function (:arguments ("string")) nil [20516 20843]) ("htmlize-make-hyperlinks" function nil nil [20845 21766]) ("if" code nil nil [22077 22318]) ("htmlize-x-library-search-path" variable (:default-value (quote ("/usr/X11R6/lib/X11/" "/usr/X11R5/lib/X11/" "/usr/lib/X11R6/X11/" "/usr/lib/X11R5/X11/" "/usr/local/X11R6/lib/X11/" "/usr/local/X11R5/lib/X11/" "/usr/local/lib/X11R6/X11/" "/usr/local/lib/X11R5/X11/" "/usr/X11/lib/X11/" "/usr/lib/X11/" "/usr/local/lib/X11/" "/usr/X386/lib/X11/" "/usr/x386/lib/X11/" "/usr/XFree86/lib/X11/" "/usr/unsupported/lib/X11/" "/usr/athena/lib/X11/" "/usr/local/x11r5/lib/X11/" "/usr/lpp/Xamples/lib/X11/" "/usr/openwin/lib/X11/" "/usr/openwin/share/lib/X11/"))) nil [22320 22924]) ("htmlize-get-color-rgb-hash" function (:arguments ("&optional" "rgb-file")) nil [22926 24129]) ("htmlize-color-rgb-hash" variable (:default-value (htmlize-get-color-rgb-hash)) nil [24280 24340]) ("htmlize-face-specifies-property" function (:arguments ("face" "prop")) nil [24363 24923]) ("htmlize-face-color-internal" function (:arguments ("face" "fg")) nil [24925 25742]) ("htmlize-face-foreground" function (:arguments ("face")) nil [25744 26126]) ("htmlize-face-background" function (:arguments ("face")) nil [26128 26512]) ("htmlize-color-to-rgb" function (:arguments ("color")) nil [26616 27996]) ("htmlize-fstruct" type (:members ("foreground" "background" "boldp" "italicp" "underlinep" "overlinep" "strikep" "css-name") :type "struct") nil [28408 28767]) ("htmlize-face-emacs21-attr" function (:arguments ("fstruct" "attr" "value")) nil [28769 29661]) ("htmlize-face-to-fstruct" function (:arguments ("face")) nil [29663 32573]) ("htmlize-attrlist-to-fstruct" function (:arguments ("attrlist")) nil [32907 33725]) ("htmlize-face-list-p" function (:arguments ("face-prop")) nil [33727 34695]) ("htmlize-make-face-map" function (:arguments ("faces")) nil [34697 35658]) ("htmlize-faces-in-buffer" function nil nil [35660 37405]) ("cond" code nil nil [37752 39331]) ("htmlize-method" function (:arguments ("method" "&rest" "args")) nil [40194 40405]) ("htmlize-method-function" function (:arguments ("method")) nil [40407 40699]) ("htmlize-css-doctype" function nil nil [40733 40846]) ("htmlize-css-specs" function (:arguments ("fstruct")) nil [40884 41702]) ("htmlize-css-insert-head" function (:arguments ("buffer-faces" "face-map")) nil [41704 42958]) ("htmlize-css-insert-text" function (:arguments ("text" "fstruct-list" "buffer")) nil [42960 43468]) ("htmlize-font-doctype" function nil nil [43509 44880]) ("htmlize-font-body-tag" function (:arguments ("face-map")) nil [44882 45103]) ("htmlize-font-insert-text" function (:arguments ("text" "fstruct-list" "buffer")) nil [45105 46485]) ("htmlize-buffer-1" function nil nil [46488 50481]) ("htmlize-ensure-fontified" function nil nil [50506 51640]) ("htmlize-buffer" function (:user-visible-flag t :arguments ("&optional" "buffer")) nil [51659 52549]) ("htmlize-region" function (:user-visible-flag t :arguments ("beg" "end")) nil [52566 53017]) ("htmlize-make-file-name" function (:arguments ("file")) nil [53019 53509]) ("htmlize-file" function (:user-visible-flag t :arguments ("file" "&optional" "target")) nil [53927 56582]) ("htmlize-many-files" function (:user-visible-flag t :arguments ("files" "&optional" "target-directory")) nil [56599 57896]) ("htmlize-many-files-dired" function (:user-visible-flag t :arguments ("arg" "&optional" "target-directory")) nil [57913 58103]) ("htmlize" package nil nil [58105 58123]))
    :file "htmlize.el"
    :pointmax 58150
    )
   (semanticdb-table "ido.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("ido" package nil nil [20394 20408]) ("if" code nil nil [20441 20514]) ("unless" code nil nil [20982 21072]) ("unless" code nil nil [20860 20979]) ("unless" code nil nil [20753 20857]) ("unless" code nil nil [20682 20750]) ("condition-case" code nil nil [20620 20679]) ("ido-fractionp" function (:arguments ("n")) nil [21149 21215]) ("defgroup" code nil nil [21217 21437]) ("ido-enabled" variable nil nil [21454 22379]) ("ido-case-fold" variable (:user-visible-flag t :default-value case-fold-search) nil [22381 22525]) ("ido-ignore-buffers" variable (:user-visible-flag t :default-value (quote ("\\` "))) nil [22527 22882]) ("ido-ignore-files" variable (:user-visible-flag t :default-value (quote ("\\`CVS/" "\\`#" "\\`.#" "\\`\\.\\./" "\\`\\./"))) nil [22884 23268]) ("ido-ignore-extensions" variable (:user-visible-flag t :default-value t) nil [23270 23407]) ("ido-show-dot-for-dired" variable (:user-visible-flag t) nil [23409 23622]) ("ido-ignore-directories" variable (:user-visible-flag t :default-value (quote ("\\`CVS/" "\\`\\.\\./" "\\`\\./"))) nil [23624 23827]) ("ido-ignore-directories-merge" variable (:user-visible-flag t) nil [23829 24130]) ("ido-default-file-method" variable (:user-visible-flag t :default-value (quote always-frame)) nil [24523 25329]) ("ido-default-buffer-method" variable (:user-visible-flag t :default-value (quote always-frame)) nil [25331 25669]) ("ido-enable-regexp" variable (:user-visible-flag t) nil [25671 25851]) ("ido-enable-prefix" variable (:user-visible-flag t) nil [25853 26210]) ("ido-record-commands" variable (:user-visible-flag t :default-value t) nil [26212 26401]) ("ido-max-prospects" variable (:user-visible-flag t :default-value 12) nil [26403 26705]) ("ido-max-prompt-path" variable (:user-visible-flag t :default-value 0.35) nil [26707 27093]) ("ido-max-window-height" variable (:user-visible-flag t) nil [27095 27429]) ("ido-enable-last-directory-history" variable (:user-visible-flag t :default-value t) nil [27431 27652]) ("ido-max-work-directory-list" variable (:user-visible-flag t :default-value 50) nil [27654 27923]) ("ido-work-directory-list-ignore-regexps" variable (:user-visible-flag t) nil [27925 28205]) ("ido-record-ftp-work-directories" variable (:user-visible-flag t :default-value t) nil [28207 28354]) ("ido-merge-ftp-work-directories" variable (:user-visible-flag t) nil [28356 28512]) ("ido-cache-ftp-work-directory-time" variable (:user-visible-flag t :default-value 1.0) nil [28514 28702]) ("ido-slow-ftp-hosts" variable (:user-visible-flag t) nil [28704 28982]) ("ido-slow-ftp-host-regexps" variable (:user-visible-flag t) nil [28984 29137]) ("ido-max-work-file-list" variable (:user-visible-flag t :default-value 10) nil [29139 29420]) ("ido-work-directory-match-only" variable (:user-visible-flag t :default-value t) nil [29422 29756]) ("ido-auto-merge-work-directories-length" variable (:user-visible-flag t) nil [29758 30129]) ("ido-auto-merge-delay-time" variable (:user-visible-flag t :default-value 0.7) nil [30131 30273]) ("ido-merged-indicator" variable (:default-value "^") nil [30275 30419]) ("ido-max-dir-file-cache" variable (:user-visible-flag t :default-value 100) nil [30421 30662]) ("ido-rotate-file-list-default" variable (:user-visible-flag t) nil [30664 30823]) ("ido-create-new-buffer" variable (:user-visible-flag t :default-value (quote prompt)) nil [30825 31169]) ("ido-define-mode-map-hook" variable (:user-visible-flag t) nil [31171 31306]) ("ido-separator" variable (:user-visible-flag t) nil [31308 31496]) ("ido-decorations" variable (:user-visible-flag t :default-value (quote ("{" "}" " | " " | ..." "[" "]" " [No match]" " [Matched]"))) nil [31498 32250]) ("ido-use-faces" variable (:user-visible-flag t :default-value t) nil [32252 32416]) ("ido-first-match-face" variable (:user-visible-flag t :default-value (quote ((t (:bold t))))) nil [32418 32532]) ("ido-only-match-face" variable (:user-visible-flag t :default-value (quote ((((class color)) (:foreground "ForestGreen")) (t (:italic t))))) nil [32534 32760]) ("ido-subdir-face" variable (:user-visible-flag t :default-value (quote ((((class color)) (:foreground "red")) (t (:underline t))))) nil [32762 32988]) ("ido-indicator-face" variable (:user-visible-flag t :default-value (quote ((((class color)) (:foreground "yellow" :background "red" :width condensed)) (t (:inverse-video t))))) nil [32990 33215]) ("ido-make-file-list-hook" variable (:user-visible-flag t) nil [33217 33494]) ("ido-make-dir-list-hook" variable (:user-visible-flag t) nil [33496 33784]) ("ido-make-buffer-list-hook" variable (:user-visible-flag t) nil [33786 34074]) ("ido-make-file-prompt-hook" variable (:user-visible-flag t) nil [34076 34874]) ("ido-rewrite-prompt-path-rules" variable (:user-visible-flag t) nil [34876 35359]) ("ido-completion-buffer" variable (:user-visible-flag t :default-value "*Ido Completions*") nil [35361 35541]) ("ido-completion-buffer-all-completions" variable (:user-visible-flag t) nil [35543 35746]) ("ido-all-frames" variable (:user-visible-flag t :default-value (quote visible)) nil [35748 35903]) ("ido-minibuffer-setup-hook" variable (:user-visible-flag t) nil [35905 36529]) ("ido-save-directory-list-file" variable (:default-value "~/.ido.last") nil [36531 36757]) ("ido-mode-map" variable nil nil [36808 36889]) ("ido-file-history" variable nil nil [36891 36974]) ("ido-buffer-history" variable nil nil [36976 37067]) ("ido-xemacs" variable (:default-value (string-match "XEmacs" (emacs-version))) nil [37069 37208]) ("ido-last-directory-list" variable nil nil [37210 37342]) ("ido-work-directory-list" variable nil nil [37344 37541]) ("ido-work-file-list" variable nil nil [37543 37739]) ("ido-dir-file-cache" variable nil nil [37741 37882]) ("ido-eoinput" variable (:default-value 1) nil [37906 38027]) ("make-variable-buffer-local" code nil nil [38028 38069]) ("ido-common-match-string" variable nil nil [38071 38168]) ("ido-rescan" variable nil nil [38170 38261]) ("ido-rotate" variable nil nil [38263 38337]) ("ido-text" variable nil nil [38339 38407]) ("ido-text-init" variable nil nil [38409 38495]) ("ido-matches" variable nil nil [38497 38570]) ("ido-report-no-match" variable (:default-value t) nil [38572 38662]) ("ido-exit" variable nil nil [38664 38812]) ("ido-current-directory" variable nil nil [38814 38889]) ("ido-auto-merge-timer" variable nil nil [38891 38956]) ("ido-find-literal" variable nil nil [41300 41380]) ("ido-saved-vc-mt" variable nil nil [41198 41296]) ("ido-change-word-sub" variable nil nil [41099 41194]) ("ido-bufs-in-frame" variable nil nil [41011 41095]) ("ido-work-file-index" variable nil nil [40925 41007]) ("ido-pre-merge-state" variable nil nil [40773 40921]) ("ido-try-merged-list" variable (:default-value t) nil [40682 40769]) ("ido-use-merged-list" variable nil nil [40593 40678]) ("ido-work-directory-index" variable nil nil [40497 40589]) ("ido-rotate-temp" variable nil nil [40397 40493]) ("ido-temp-list" variable nil nil [40302 40393]) ("ido-require-match" variable nil nil [40219 40298]) ("ido-entry-buffer" variable nil nil [40145 40215]) ("ido-default-item" variable nil nil [40084 40141]) ("ido-process-ignore-lists-inhibit" variable nil nil [39991 40080]) ("ido-process-ignore-lists" variable (:default-value t) nil [39919 39987]) ("ido-use-mycompletion-depth" variable nil nil [39710 39915]) ("ido-keep-item-list" variable nil nil [39635 39706]) ("ido-ignored-list" variable nil nil [39495 39631]) ("ido-cur-list" variable nil nil [39202 39491]) ("ido-cur-item" variable nil nil [39108 39198]) ("ido-active" function (:arguments ("&optional" "merge")) nil [41399 41564]) ("ido-trace-enable" variable nil nil [41566 41595]) ("ido-trace" function (:arguments ("p" "&optional" "s" "retval")) nil [41597 41883]) ("ido-is-root-directory" function (:arguments ("&optional" "dir")) nil [41885 42096]) ("ido-is-ftp-directory" function (:arguments ("&optional" "dir")) nil [42098 42210]) ("ido-is-slow-ftp-host" function (:arguments ("&optional" "dir")) nil [42212 42746]) ("ido-time-stamp" function (:arguments ("&optional" "time")) nil [42748 42942]) ("ido-cache-ftp-valid" function (:arguments ("&optional" "time")) nil [42944 43178]) ("ido-may-cache-directory" function (:arguments ("&optional" "dir")) nil [43180 43445]) ("ido-pp" function (:arguments ("list" "&optional" "sep")) nil [43447 43974]) ("ido-save-history" function (:user-visible-flag t) nil [43976 44892]) ("ido-load-history" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [44894 45734]) ("ido-wash-history" function (:user-visible-flag t) nil [45736 48697]) ("ido-kill-emacs-hook" function nil nil [48700 48776]) ("ido-mode" function (:user-visible-flag t :arguments ("&optional" "arg" "nobind")) nil [48793 51014]) ("ido-define-mode-map" function nil nil [51033 53658]) ("ido-final-slash" function (:arguments ("dir" "&optional" "fix-it")) nil [53660 53924]) ("ido-set-current-directory" function (:arguments ("dir" "&optional" "subdir" "no-merge")) nil [53926 54422]) ("ido-set-current-home" function nil nil [54424 54567]) ("ido-record-command" function (:arguments ("command" "arg")) nil [54569 54875]) ("ido-make-prompt" function (:arguments ("item" "prompt")) nil [54877 56161]) ("ido-read-internal" function (:arguments ("item" "prompt" "history" "&optional" "default" "require-match" "initial")) nil [57775 66086]) ("ido-edit-input" function (:user-visible-flag t) nil [66088 66259]) ("ido-buffer-internal" function (:arguments ("method" "&optional" "fallback" "prompt" "default" "initial")) nil [66280 67585]) ("ido-read-buffer" function (:arguments ("prompt" "&optional" "default" "require-match" "initial")) nil [67602 68155]) ("ido-record-work-directory" function (:arguments ("&optional" "dir")) nil [68157 68822]) ("ido-forget-work-directory" function nil nil [68824 69256]) ("ido-record-work-file" function (:arguments ("name")) nil [69260 69696]) ("ido-file-internal" function (:arguments ("method" "&optional" "fallback" "default" "prompt" "item" "initial")) nil [69698 73478]) ("ido-existing-item-p" function nil nil [73480 73585]) ("ido-set-common-completion" function nil nil [73608 74079]) ("ido-complete" function (:user-visible-flag t) nil [74081 75508]) ("ido-undo-merge-work-directory" function (:user-visible-flag t :arguments ("&optional" "text" "try" "refresh")) nil [75510 76371]) ("ido-toggle-case" function (:user-visible-flag t) nil [76400 76585]) ("ido-toggle-regexp" function (:user-visible-flag t) nil [76587 76786]) ("ido-toggle-prefix" function (:user-visible-flag t) nil [76788 76987]) ("ido-toggle-ignore" function (:user-visible-flag t) nil [76989 77238]) ("ido-toggle-vc" function (:user-visible-flag t) nil [77240 77540]) ("ido-toggle-literal" function (:user-visible-flag t) nil [77542 77812]) ("ido-exit-minibuffer" function (:user-visible-flag t) nil [77814 78015]) ("ido-select-text" function (:user-visible-flag t) nil [78017 78241]) ("ido-fallback-command" function (:user-visible-flag t) nil [78243 78390]) ("ido-enter-find-file" function (:user-visible-flag t) nil [78392 78533]) ("ido-enter-switch-buffer" function (:user-visible-flag t) nil [78535 78688]) ("ido-enter-dired" function (:user-visible-flag t) nil [78690 78818]) ("ido-up-directory" function (:user-visible-flag t :arguments ("&optional" "clear")) nil [78821 79033]) ("ido-delete-backward-updir" function (:user-visible-flag t :arguments ("count")) nil [79035 79470]) ("ido-delete-backward-word-updir" function (:user-visible-flag t :arguments ("count")) nil [79472 79758]) ("ido-get-work-directory" function (:arguments ("&optional" "incr" "must-match")) nil [79760 80509]) ("ido-prev-work-directory" function (:user-visible-flag t) nil [80511 80855]) ("ido-next-work-directory" function (:user-visible-flag t) nil [80857 81206]) ("ido-merge-work-directories" function (:user-visible-flag t) nil [81208 81505]) ("ido-wide-find-file" function (:user-visible-flag t :arguments ("&optional" "file")) nil [81507 81948]) ("ido-wide-find-dir" function (:user-visible-flag t :arguments ("&optional" "dir")) nil [81950 82409]) ("ido-make-directory" function (:user-visible-flag t :arguments ("&optional" "dir")) nil [82411 82918]) ("ido-get-work-file" function (:arguments ("incr")) nil [82920 83200]) ("ido-prev-work-file" function (:user-visible-flag t) nil [83202 83435]) ("ido-next-work-file" function (:user-visible-flag t) nil [83437 83675]) ("ido-copy-current-file-name" function (:user-visible-flag t :arguments ("all")) nil [83677 84246]) ("ido-copy-current-word" function (:user-visible-flag t :arguments ("all")) nil [84250 85269]) ("ido-next-match" function (:user-visible-flag t) nil [85271 85527]) ("ido-prev-match" function (:user-visible-flag t) nil [85529 85792]) ("ido-next-match-dir" function (:user-visible-flag t) nil [85794 86408]) ("ido-prev-match-dir" function (:user-visible-flag t) nil [86410 87039]) ("ido-chop" function (:arguments ("items" "elem")) nil [87041 87400]) ("ido-name" function (:arguments ("item")) nil [87402 87564]) ("ido-all-completions" function nil nil [87605 87968]) ("ido-sort-list" function (:arguments ("items")) nil [87971 88090]) ("ido-sort-merged-list" function (:arguments ("items" "promote")) nil [88092 88680]) ("ido-wide-find-dirs-or-files" function (:arguments ("dir" "file" "&optional" "prefix" "finddir")) nil [88682 89328]) ("ido-flatten-merged-list" function (:arguments ("items")) nil [89330 89671]) ("ido-make-merged-file-list" function (:arguments ("text" "auto" "wide")) nil [89673 91909]) ("ido-make-buffer-list1" function (:arguments ("&optional" "frame" "visible")) nil [91911 92201]) ("ido-make-buffer-list" function (:arguments ("default")) nil [92203 93080]) ("ido-to-end" function (:arguments ("items")) nil [93082 93352]) ("ido-file-name-all-completions" function (:arguments ("dir")) nil [93354 94680]) ("ido-make-file-list1" function (:arguments ("dir" "&optional" "merged")) nil [94682 95061]) ("ido-make-file-list" function (:arguments ("default")) nil [95063 96549]) ("ido-make-dir-list1" function (:arguments ("dir" "&optional" "merged")) nil [96551 96962]) ("ido-make-dir-list" function (:arguments ("default")) nil [96964 98313]) ("ido-get-buffers-in-frames" function (:arguments ("&optional" "current")) nil [98315 98748]) ("ido-get-bufname" function (:arguments ("win")) nil [98750 99150]) ("ido-set-matches1" function (:arguments ("items" "&optional" "do-full")) nil [99177 100196]) ("ido-set-matches" function nil nil [100198 100404]) ("ido-ignore-item-p" function (:arguments ("name" "re-list" "&optional" "ignore-ext")) nil [100408 101502]) ("ido-find-common-substring" function (:arguments ("items" "subs")) nil [101504 102138]) ("ido-word-matching-substring" function (:arguments ("word")) nil [102140 102518]) ("ido-makealist" function (:arguments ("res")) nil [102520 102597]) ("unless" code nil nil [102599 103787]) ("ido-completion-help" function (:user-visible-flag t) nil [103789 105374]) ("ido-kill-buffer-at-head" function (:user-visible-flag t) nil [105400 105829]) ("ido-delete-file-at-head" function (:user-visible-flag t) nil [105855 106534]) ("ido-visit-buffer" function (:arguments ("buffer" "method" "&optional" "record")) nil [106561 108125]) ("ido-window-buffer-p" function (:arguments ("buffer")) nil [108128 108544]) ("ido-switch-buffer" function (:user-visible-flag t) nil [108611 110381]) ("ido-switch-buffer-other-window" function (:user-visible-flag t) nil [110398 110708]) ("ido-display-buffer" function (:user-visible-flag t) nil [110725 111004]) ("ido-kill-buffer" function (:user-visible-flag t) nil [111021 111297]) ("ido-insert-buffer" function (:user-visible-flag t) nil [111314 111611]) ("ido-switch-buffer-other-frame" function (:user-visible-flag t) nil [111628 111982]) ("ido-find-file-in-dir" function (:user-visible-flag t :arguments ("dir")) nil [111999 112236]) ("ido-find-file" function (:user-visible-flag t) nil [112253 114667]) ("ido-find-file-other-window" function (:user-visible-flag t) nil [114684 114987]) ("ido-find-alternate-file" function (:user-visible-flag t) nil [115004 115326]) ("ido-find-file-read-only" function (:user-visible-flag t) nil [115343 115667]) ("ido-find-file-read-only-other-window" function (:user-visible-flag t) nil [115684 116063]) ("ido-find-file-read-only-other-frame" function (:user-visible-flag t) nil [116080 116455]) ("ido-display-file" function (:user-visible-flag t) nil [116472 116737]) ("ido-find-file-other-frame" function (:user-visible-flag t) nil [116754 117053]) ("ido-write-file" function (:user-visible-flag t) nil [117070 117544]) ("ido-insert-file" function (:user-visible-flag t) nil [117561 117846]) ("ido-dired" function (:user-visible-flag t) nil [117863 118198]) ("ido-list-directory" function (:user-visible-flag t) nil [118200 118580]) ("ido-initiate-auto-merge" function (:arguments ("buffer")) nil [119119 119691]) ("ido-exhibit" function nil nil [119693 124692]) ("ido-completions" function (:arguments ("name" "candidates" "predicate" "require-match")) nil [124694 127082]) ("ido-minibuffer-setup" function nil nil [127084 127620]) ("ido-tidy" function nil nil [127622 128447]) ("ido-summary-buffers-to-end" function nil nil [128449 128950]) ("ido-read-file-name" function (:arguments ("prompt" "&optional" "dir" "default-filename" "mustmatch" "initial")) nil [129008 129650]) ("ido-read-directory-name" function (:arguments ("prompt" "&optional" "dir" "default-dirname" "mustmatch" "initial")) nil [129667 130301]))
    :file "ido.el"
    :pointmax 130314
    )
   (semanticdb-table "mh-abbrevs.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("define-abbrev-table" code nil nil [1 56]) ("define-abbrev-table" code nil nil [58 114]) ("define-abbrev-table" code nil nil [116 171]) ("define-abbrev-table" code nil nil [173 26831]) ("define-abbrev-table" code nil nil [26833 26899]) ("define-abbrev-table" code nil nil [26901 26961]) ("define-abbrev-table" code nil nil [26963 27017]) ("define-abbrev-table" code nil nil [27019 27080]) ("define-abbrev-table" code nil nil [27082 27133]))
    :file "mh-abbrevs.el"
    :pointmax 27135
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0beta3"
  :semanticdb-version "2.0beta3"
  )
