# # Extensible 3D (X3D) Document Type Definition (DTD) x3d-3.0.dtd
# #
# # X3D Specification DTD:
# #
# #	http://www.web3D.org/specifications/x3d-3.0.dtd
# #
# #	current version:  3.0.17
# #
# #	revised:          16 September 2004
# #
# #	Author:           Don Brutzman
# #
# # X3D Specification DTDs:
# #	http://www.web3d.org/specifications/x3d-3.0.dtd
# #	http://www.web3d.org/specifications/x3d-3.0-InputOutputFields.dtd
# #	http://www.web3d.org/specifications/x3d-3.0-Web3dExtensionsPublic.dtd
# #	http://www.web3d.org/specifications/x3d-3.0-Web3dExtensionsPrivate.dtd
# #
# # X3D Revision DTDs:
# #	http://www.web3d.org/x3d/content/x3d-3.0.dtd
# #	http://www.web3d.org/x3d/content/x3d-3.0-InputOutputFields.dtd
# #	http://www.web3d.org/x3d/content/x3d-3.0-Web3dExtensionsPublic.dtd
# #	http://www.web3d.org/x3d/content/x3d-3.0-Web3dExtensionsPrivate.dtd
# #
# # Final doctype:
# #  <!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.0//EN" "http://www.web3d.org/specifications/x3d-3.0.dtd">
# #
# # Transitional doctype:
# #  <!DOCTYPE X3D PUBLIC "http://www.web3d.org/specifications/x3d-3.0.dtd" "file:///www.web3d.org/specifications/x3d-3.0.dtd">
# #
# # Typical system location for this resource:
# #	file://c:/www.web3d.org/specifications/x3d-3.0.dtd
# #	  file:///www.web3d.org/specifications/x3d-3.0.dtd
# #
# # Change log:
# #	http://www.web3d.org/specifications/x3d-dtd-changelog.txt
# #
# # Further information on the Extensible 3D (X3D) specification is available at
# #	http://www.web3D.org/x3d.html

# Profile:  default is Full profile and all components.
# Authors can override these default IGNORE/INCLUDE values.
# If InterchangeProfile or InterchangeProfile is INCLUDEd, then IGNORE all others.

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace xsd = "http://www.w3.org/2001/XMLSchema-instance"

profileNames =
  "Full"
  | "Immersive"
  | "Interactive"
  | "Interchange"
  | "Core"
  | "MPEG4Interactive"
componentNames =
  "Core"
  | "DIS"
  | "EnvironmentalEffects"
  | "EnvironmentalSensor"
  | "EventUtilities"
  | "Geometry2D"
  | "Geometry3D"
  | "Geospatial"
  | "Grouping"
  | "H-Anim"
  | "Interpolation"
  | "KeyDeviceSensor"
  | "Lighting"
  | "Navigation"
  | "Networking"
  | "NURBS"
  | "PointingDeviceSensor"
  | "Rendering"
  | "Scripting"
  | "Shape"
  | "Sound"
  | "Text"
  | "Texturing"
  | "Time"
componentLevels = "1" | "2" | "3" | "4"
X3dFieldTypes =
  "SFBool"
  | "MFBool"
  | "SFColor"
  | "MFColor"
  | "SFColorRGBA"
  | "MFColorRGBA"
  | "SFDouble"
  | "MFDouble"
  | "SFFloat"
  | "MFFloat"
  | "SFImage"
  | "MFImage"
  | "SFInt32"
  | "MFInt32"
  | "SFNode"
  | "MFNode"
  | "SFRotation"
  | "MFRotation"
  | "SFString"
  | "MFString"
  | "SFTime"
  | "MFTime"
  | "SFVec2f"
  | "MFVec2f"
  | "SFVec2d"
  | "MFVec2d"
  | "SFVec3f"
  | "MFVec3f"
  | "SFVec3d"
  | "MFVec3d"
# X3D type definitions as DTD types
SFBool = "true" | "false"
SFColor = string
MFColor = string
MFColorRGBA = string
SFFloat = string
MFFloat = string
SFDouble = string
MFDouble = string
SFImage = string
SFInt32 = string
MFInt32 = string
SFRotation = string
MFRotation = string
SFString = string
MFString = string
SFTime = string
SFVec2f = string
MFVec2f = string
SFVec3f = string
MFVec3f = string
SFVec3d = string
MFVec3d = string
TextureCoordinateGeneratorModes =
  "SPHERE"
  | "CAMERASPACENORMAL"
  | "CAMERASPACEPOSITION"
  | "CAMERASPACEREFLECTIONVECTOR"
  | "SPHERE-LOCAL"
  | "COORD"
  | "COORD-EYE"
  | "NOISE"
  | "NOISE-EYE"
  | "SPHERE-REFLECT"
  | "SPHERE-REFLECT-LOCAL"
MultiTextureModes = string
# MFString
MultiTextureSourceValues = string
# MFString
MultiTextureFunctionValues = string
# MFString

# User needs to append | after listing each new node in any of these extensions.
# For an example, see examples/ProtoTagDtdDeclarationExamples.x3d
AppearanceNodeExtensions = notAllowed
AudioClipNodeExtensions = notAllowed
BindableNodeExtensions = notAllowed
ColorNodeExtensions = notAllowed
CoordinateNodeExtensions = notAllowed
FontStyleNodeExtensions = notAllowed
EventUtilityNodeExtensions = notAllowed
GeometryNodeExtensions = notAllowed
GroupingNodeExtensions = notAllowed
InterpolatorNodeExtensions = notAllowed
LightNodeExtensions = notAllowed
MaterialNodeExtensions = notAllowed
MetadataNodeExtensions = notAllowed
NormalNodeExtensions = notAllowed
ScriptNodeExtensions = notAllowed
SensorNodeExtensions = notAllowed
ShapeNodeExtensions = notAllowed
SoundNodeExtensions = notAllowed
# MovieTexture must be able to appear twice:
MovieTextureNodeExtensions = notAllowed
TextureNodeExtensions = notAllowed
TextureCoordinateNodeExtensions = notAllowed
TextureTransformNodeExtensions = notAllowed
UrlNodeExtensions = notAllowed
WorldInfoNodeExtensions = notAllowed
# Users defining PROTOs do not override any of the following parameter entity declarations.
WildcardNodes = ProtoInstance
DISGroupingNodes =
  EspduTransform | SignalPdu | ReceiverPdu | TransmitterPdu
GeoCoordinateNode = GeoCoordinate
GeoElevationGridNode = GeoElevationGrid
GeoGroupingNodes = GeoLocation | GeoLOD
GeoMetadataNode = GeoMetadata
GeoOriginNode = GeoOrigin
GeoBehaviorNodes = GeoPositionInterpolator | GeoTouchSensor
GeoViewpointNode = GeoViewpoint
HAnimGroupingNodes =
  HAnimJoint | HAnimSegment | HAnimSite | HAnimHumanoid
DisplacerNode = HAnimDisplacer
NurbsGroupingNodes = Contour2D | NurbsGroup | NurbsTextureSurface
NurbsGeometryNodes =
  ContourPolyline2D
  | NurbsCurve
  | NurbsCurve2D
  | NurbsPatchSurface
  | NurbsTrimmedSurface
  | NurbsSweptSurface
  | NurbsSwungSurface
NurbsInterpolators =
  NurbsPositionInterpolator
  | NurbsOrientationInterpolator
  | NurbsSurfaceInterpolator
NurbsControlCurveNodes = NurbsCurve | ContourPolyline2D
Web3dExtensionGeometryNodes = XvlShell
# otherwise set tag lists to null strings if not previously defined by DIS, GeoSpatial, HAnim, Nurbs, Web3dExtension
Web3dExtensionGroupingNodes = notAllowed
# no further content-model extensions needed

# UrlNodes used by LoadSensor
UrlNodes =
  UrlNodeExtensions
  | Anchor
  | AudioClip
  | ImageTexture
  | Inline
  | MovieTexture
  | Script
# Declarations appearing only in ImmersiveProfile
AudioClipNodes = AudioClipNodeExtensions | AudioClip
FontStyleNodes = FontStyleNodeExtensions | FontStyle
EventUtilityNodes =
  EventUtilityNodeExtensions
  | BooleanFilter
  | BooleanSequencer
  | BooleanToggle
  | BooleanTrigger
  | IntegerSequencer
  | IntegerTrigger
  | TimeTrigger
MovieTextureNodes = MovieTextureNodeExtensions | MovieTexture
NormalNodes = NormalNodeExtensions | Normal
SoundNodes = SoundNodeExtensions | Sound
TextureCoordinateNodes =
  TextureCoordinateNodeExtensions
  | TextureCoordinate
  | TextureCoordinateGenerator
  | MultiTextureCoordinate
  | NurbsTextureCoordinate
TextureTransformNodes =
  TextureTransformNodeExtensions
  | TextureTransform
  | MultiTextureTransform
# Declarations appearing differently in X3dExtensions, ImmersiveProfile and InterchangeProfile

# X3D Extensions (superset overriding some ImmersiveProfile declarations) not yet defined.
AppearanceNodeX3dExtensions = notAllowed
GeometryNodesX3dExtensions = notAllowed
AppearanceNodes =
  AppearanceNodeExtensions | AppearanceNodeX3dExtensions | Appearance
BehaviorLeafNodes =
  InterpolatorNodeExtensions
  | SensorNodeExtensions
  | ScriptNodeExtensions
  | GeoBehaviorNodes
  | DisplacerNode
  | NurbsInterpolators
  | EventUtilityNodes
  | ColorInterpolator
  | CoordinateInterpolator
  | CoordinateInterpolator2D
  | CylinderSensor
  | KeySensor
  | LoadSensor
  | NormalInterpolator
  | OrientationInterpolator
  | PlaneSensor
  | PositionInterpolator
  | PositionInterpolator2D
  | ProximitySensor
  | ScalarInterpolator
  | Script
  | SphereSensor
  | StringSensor
  | TimeSensor
  | TouchSensor
  | VisibilitySensor
BindableNodes =
  BindableNodeExtensions
  | GeoViewpointNode
  | Background
  | Fog
  | NavigationInfo
  | TextureBackground
  | Viewpoint
ColorNodes = ColorNodeExtensions | Color | ColorRGBA
CoordinateNodes =
  CoordinateNodeExtensions
  | GeoCoordinateNode
  | Coordinate
  | CoordinateDouble
Geometry2DNodes =
  Arc2D
  | ArcClose2D
  | Circle2D
  | Disk2D
  | Polyline2D
  | Polypoint2D
  | Rectangle2D
  | TriangleSet2D
GeometryNodes =
  GeometryNodeExtensions
  | GeometryNodesX3dExtensions
  | GeoElevationGridNode
  | NurbsGeometryNodes
  | Web3dExtensionGeometryNodes
  | Geometry2DNodes
  | Box
  | Cone
  | Cylinder
  | ElevationGrid
  | Extrusion
  | IndexedFaceSet
  | IndexedLineSet
  | LineSet
  | PointSet
  | Sphere
  | Text
  | IndexedTriangleFanSet
  | IndexedTriangleSet
  | IndexedTriangleStripSet
  | TriangleFanSet
  | TriangleSet
  | TriangleStripSet
GroupingNodes =
  GroupingNodeExtensions
  | DISGroupingNodes
  | GeoGroupingNodes
  | HAnimGroupingNodes
  | NurbsGroupingNodes
  | Web3dExtensionGroupingNodes
  | Anchor
  | Billboard
  | Collision
  | Group
  | Inline
  | LOD
  | StaticGroup
  | Switch
  | Transform
LightNodes =
  LightNodeExtensions | DirectionalLight | SpotLight | PointLight
MaterialNodes = MaterialNodeExtensions | Material
ShapeNodes = ShapeNodeExtensions | Shape
TextureNodes =
  TextureNodeExtensions
  | ImageTexture
  | MovieTexture
  | MultiTexture
  | PixelTexture
MultiTextureChildTextures =
  TextureNodeExtensions | ImageTexture | MovieTexture | PixelTexture
WorldInfoNodes = WorldInfoNodeExtensions | GeoMetadataNode | WorldInfo
GeometricPropertyNodes =
  CoordinateNodes | ColorNodes | NormalNodes | TextureCoordinateNodes
AppearanceChildNodes =
  MaterialNodes | TextureNodes | TextureTransformNodes
SceneLeafNodes =
  GeoOriginNode | LightNodes | ShapeNodes | SoundNodes | WorldInfoNodes
OtherLeafNodes = AudioClip | LineProperties | FillProperties
MetadataNodes =
  MetadataNodeExtensions
  | MetadataDouble
  | MetadataFloat
  | MetadataInteger
  | MetadataSet
  | MetadataString
  | ProtoInstance
ProtoNodes =
  OtherLeafNodes
  | AppearanceNodes
  | AppearanceChildNodes
  | BehaviorLeafNodes
  | BindableNodes
  | FontStyleNodes
  | GeometricPropertyNodes
  | GeometryNodes
  | GroupingNodes
  | MetadataNodes
  | SceneLeafNodes
  | ProtoDeclare
  | ProtoInstance
ChildrenNodes =
  BehaviorLeafNodes
  | BindableNodes
  | GroupingNodes
  | SceneLeafNodes
  | ROUTE
  | EXPORT
  | IMPORT
# need any order for prototypes
SceneNodes =
  ExternProtoDeclare | ProtoDeclare | ChildrenNodes | WildcardNodes
# SensorNodes not used (yet, anyway) in tagset content-model definitions.

# ****************************** X3D DTD ******************************
Anchor =
  element Anchor {
    attlist.Anchor,
    IS?,
    MetadataNodes?,
    (ChildrenNodes | WildcardNodes)*
  }
attlist.Anchor &=
  attribute description { SFString }?,
  attribute parameter { MFString }?,
  attribute url { MFString }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
# Complete, unordered, concisely enumerated version of Appearance by Heiko Grussbach.  Prepended either-order FillProperties/LineProperties.
Appearance =
  element Appearance {
    attlist.Appearance,
    IS?,
    MetadataNodes?,
    ((FillProperties, LineProperties?)
     | (LineProperties, FillProperties)?)?,
    ((MaterialNodes,
      ((TextureNodes, (TextureTransformNodes | WildcardNodes)?)
       | (TextureTransformNodes, (TextureNodes | WildcardNodes)?)
       | (WildcardNodes,
          (TextureNodes | TextureTransformNodes | WildcardNodes)?))?)
     | (TextureNodes,
        ((MaterialNodes, (TextureTransformNodes | WildcardNodes)?)
         | (TextureTransformNodes, (MaterialNodes | WildcardNodes)?)
         | (WildcardNodes,
            (MaterialNodes | TextureTransformNodes | WildcardNodes)?))?)
     | (TextureTransformNodes,
        ((MaterialNodes, (TextureNodes | WildcardNodes)?)
         | (TextureNodes, (MaterialNodes | WildcardNodes)?)
         | (WildcardNodes,
            (MaterialNodes | TextureNodes | WildcardNodes)?))?)
     | (WildcardNodes,
        ((MaterialNodes,
          (TextureNodes | TextureTransformNodes | WildcardNodes)?)
         | (TextureNodes,
            (MaterialNodes | TextureTransformNodes | WildcardNodes)?)
         | (TextureTransformNodes,
            (MaterialNodes | TextureNodes | WildcardNodes)?)
         | (WildcardNodes,
            (MaterialNodes
             | TextureNodes
             | TextureTransformNodes
             | WildcardNodes)?))?))?
  }
attlist.Appearance &=
  [ a:defaultValue = "appearance" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
AudioClip = element AudioClip { attlist.AudioClip, IS?, MetadataNodes? }
attlist.AudioClip &=
  attribute description { SFString }?,
  [ a:defaultValue = "false" ] attribute loop { SFBool }?,
  [ a:defaultValue = "1.0" ] attribute pitch { SFFloat }?,
  [ a:defaultValue = "0" ] attribute startTime { SFTime }?,
  [ a:defaultValue = "0" ] attribute stopTime { SFTime }?,
  [ a:defaultValue = "0" ] attribute pauseTime { SFTime }?,
  [ a:defaultValue = "0" ] attribute resumeTime { SFTime }?,
  attribute url { MFString }?,
  [ a:defaultValue = "source" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Background =
  element Background { attlist.Background, IS?, MetadataNodes? }
attlist.Background &=
  attribute groundAngle { MFFloat }?,
  attribute groundColor { MFColor }?,
  attribute backUrl { MFString }?,
  attribute bottomUrl { MFString }?,
  attribute frontUrl { MFString }?,
  attribute leftUrl { MFString }?,
  attribute rightUrl { MFString }?,
  attribute topUrl { MFString }?,
  attribute skyAngle { MFFloat }?,
  [ a:defaultValue = "0 0 0" ] attribute skyColor { MFColor }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Billboard =
  element Billboard {
    attlist.Billboard,
    IS?,
    MetadataNodes?,
    (ChildrenNodes | WildcardNodes)*
  }
attlist.Billboard &=
  [ a:defaultValue = "0 1 0" ] attribute axisOfRotation { SFVec3f }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
BooleanFilter =
  element BooleanFilter { attlist.BooleanFilter, IS?, MetadataNodes? }
attlist.BooleanFilter &=
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
BooleanSequencer =
  element BooleanSequencer {
    attlist.BooleanSequencer, IS?, MetadataNodes?
  }
attlist.BooleanSequencer &=
  attribute key { MFFloat }?,
  attribute keyValue { MFFloat }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
BooleanToggle =
  element BooleanToggle { attlist.BooleanToggle, IS?, MetadataNodes? }
attlist.BooleanToggle &=
  [ a:defaultValue = "false" ] attribute toggle { SFBool }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
BooleanTrigger =
  element BooleanTrigger { attlist.BooleanTrigger, IS?, MetadataNodes? }
attlist.BooleanTrigger &=
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
# Geometry2D nodes
Arc2D = element Arc2D { attlist.Arc2D, IS?, MetadataNodes? }
attlist.Arc2D &=
  [ a:defaultValue = "1" ] attribute radius { SFFloat }?,
  [ a:defaultValue = "0" ] attribute startAngle { SFFloat }?,
  [ a:defaultValue = "1.570796" ] attribute endAngle { SFFloat }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
ArcClose2D =
  element ArcClose2D { attlist.ArcClose2D, IS?, MetadataNodes? }
attlist.ArcClose2D &=
  [ a:defaultValue = "1" ] attribute radius { SFFloat }?,
  [ a:defaultValue = "0" ] attribute startAngle { SFFloat }?,
  [ a:defaultValue = "1.570796" ] attribute endAngle { SFFloat }?,
  [ a:defaultValue = "PIE" ] attribute closureType { "PIE" | "CHORD" }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Circle2D = element Circle2D { attlist.Circle2D, IS?, MetadataNodes? }
attlist.Circle2D &=
  [ a:defaultValue = "1" ] attribute radius { SFFloat }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Disk2D = element Disk2D { attlist.Disk2D, IS?, MetadataNodes? }
attlist.Disk2D &=
  [ a:defaultValue = "0" ] attribute innerRadius { SFFloat }?,
  [ a:defaultValue = "1" ] attribute outerRadius { SFFloat }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Polyline2D =
  element Polyline2D { attlist.Polyline2D, IS?, MetadataNodes? }
attlist.Polyline2D &=
  attribute lineSegments { MFVec2f }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Polypoint2D =
  element Polypoint2D { attlist.Polypoint2D, IS?, MetadataNodes? }
attlist.Polypoint2D &=
  attribute points { MFVec2f }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Rectangle2D =
  element Rectangle2D { attlist.Rectangle2D, IS?, MetadataNodes? }
attlist.Rectangle2D &=
  [ a:defaultValue = "2 2" ] attribute size { SFVec2f }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
TriangleSet2D =
  element TriangleSet2D { attlist.TriangleSet2D, IS?, MetadataNodes? }
attlist.TriangleSet2D &=
  attribute vertices { MFVec2f }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Box = element Box { attlist.Box, IS?, MetadataNodes? }
attlist.Box &=
  [ a:defaultValue = "2 2 2" ] attribute size { SFVec3f }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Collision =
  element Collision {
    attlist.Collision,
    IS?,
    MetadataNodes?,
    (ChildrenNodes | WildcardNodes)*
  }
attlist.Collision &=
  [ a:defaultValue = "true" ] attribute enabled { SFBool }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Color = element Color { attlist.Color, IS?, MetadataNodes? }
attlist.Color &=
  attribute color { MFColor }?,
  attribute class { text }?,
  [ a:defaultValue = "color" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
ColorRGBA = element ColorRGBA { attlist.ColorRGBA, IS?, MetadataNodes? }
attlist.ColorRGBA &=
  attribute color { MFColorRGBA }?,
  [ a:defaultValue = "color" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
component = element component { attlist.component, empty }
attlist.component &=
  attribute name { componentNames },
  attribute level { componentLevels }
ColorInterpolator =
  element ColorInterpolator {
    attlist.ColorInterpolator, IS?, MetadataNodes?
  }
attlist.ColorInterpolator &=
  attribute key { MFFloat }?,
  attribute keyValue { MFColor }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Cone = element Cone { attlist.Cone, IS?, MetadataNodes? }
attlist.Cone &=
  [ a:defaultValue = "1" ] attribute bottomRadius { SFFloat }?,
  [ a:defaultValue = "2" ] attribute height { SFFloat }?,
  [ a:defaultValue = "true" ] attribute side { SFBool }?,
  [ a:defaultValue = "true" ] attribute bottom { SFBool }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Coordinate =
  element Coordinate { attlist.Coordinate, IS?, MetadataNodes? }
attlist.Coordinate &=
  attribute point { MFVec3f }?,
  [ a:defaultValue = "coord" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
CoordinateDouble =
  element CoordinateDouble {
    attlist.CoordinateDouble, IS?, MetadataNodes?
  }
attlist.CoordinateDouble &=
  attribute point { MFVec3d }?,
  [ a:defaultValue = "coord" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
CoordinateInterpolator =
  element CoordinateInterpolator {
    attlist.CoordinateInterpolator, IS?, MetadataNodes?
  }
attlist.CoordinateInterpolator &=
  attribute key { MFFloat }?,
  attribute keyValue { MFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
CoordinateInterpolator2D =
  element CoordinateInterpolator2D {
    attlist.CoordinateInterpolator2D, IS?, MetadataNodes?
  }
attlist.CoordinateInterpolator2D &=
  attribute key { MFFloat }?,
  attribute keyValue { MFVec2f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Cylinder = element Cylinder { attlist.Cylinder, IS?, MetadataNodes? }
attlist.Cylinder &=
  [ a:defaultValue = "true" ] attribute bottom { SFBool }?,
  [ a:defaultValue = "2" ] attribute height { SFFloat }?,
  [ a:defaultValue = "1" ] attribute radius { SFFloat }?,
  [ a:defaultValue = "true" ] attribute side { SFBool }?,
  [ a:defaultValue = "true" ] attribute top { SFBool }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
CylinderSensor =
  element CylinderSensor { attlist.CylinderSensor, IS?, MetadataNodes? }
attlist.CylinderSensor &=
  attribute description { SFString }?,
  [ a:defaultValue = "true" ] attribute autoOffset { SFBool }?,
  [ a:defaultValue = "0.26179167" ] attribute diskAngle { SFFloat }?,
  [ a:defaultValue = "-1" ] attribute maxAngle { SFFloat }?,
  [ a:defaultValue = "0" ] attribute minAngle { SFFloat }?,
  [ a:defaultValue = "0" ] attribute offset { SFFloat }?,
  [ a:defaultValue = "true" ] attribute enabled { SFBool }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
DirectionalLight =
  element DirectionalLight {
    attlist.DirectionalLight, IS?, MetadataNodes?
  }
attlist.DirectionalLight &=
  [ a:defaultValue = "0" ] attribute ambientIntensity { SFFloat }?,
  [ a:defaultValue = "1 1 1" ] attribute color { SFColor }?,
  [ a:defaultValue = "0 0 -1" ] attribute direction { SFVec3f }?,
  [ a:defaultValue = "1" ] attribute intensity { SFFloat }?,
  [ a:defaultValue = "true" ] attribute on { SFBool }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
# Complete, concisely enumerated unordered version of ElevationGrid by Heiko Grussbach
ElevationGrid =
  element ElevationGrid {
    attlist.ElevationGrid,
    IS?,
    MetadataNodes?,
    ((ColorNodes,
      ((NormalNodes, (TextureCoordinateNodes | WildcardNodes)?)
       | (TextureCoordinateNodes, (NormalNodes | WildcardNodes)?)
       | (WildcardNodes,
          (NormalNodes | TextureCoordinateNodes | WildcardNodes)?))?)
     | (NormalNodes,
        ((ColorNodes, (TextureCoordinateNodes | WildcardNodes)?)
         | (TextureCoordinateNodes, (ColorNodes | WildcardNodes)?)
         | (WildcardNodes,
            (ColorNodes | TextureCoordinateNodes | WildcardNodes)?))?)
     | (TextureCoordinateNodes,
        ((ColorNodes, (NormalNodes | WildcardNodes)?)
         | (NormalNodes, (ColorNodes | WildcardNodes)?)
         | (WildcardNodes,
            (ColorNodes | NormalNodes | WildcardNodes)?))?)
     | (WildcardNodes,
        ((ColorNodes,
          (NormalNodes | TextureCoordinateNodes | WildcardNodes)?)
         | (NormalNodes,
            (ColorNodes | TextureCoordinateNodes | WildcardNodes)?)
         | (TextureCoordinateNodes,
            (ColorNodes | NormalNodes | WildcardNodes)?)
         | (WildcardNodes,
            (ColorNodes
             | NormalNodes
             | TextureCoordinateNodes
             | WildcardNodes)?))?))?
  }
attlist.ElevationGrid &=
  attribute height { MFFloat }?,
  [ a:defaultValue = "true" ] attribute ccw { SFBool }?,
  [ a:defaultValue = "true" ] attribute colorPerVertex { SFBool }?,
  [ a:defaultValue = "0" ] attribute creaseAngle { SFFloat }?,
  [ a:defaultValue = "true" ] attribute normalPerVertex { SFBool }?,
  [ a:defaultValue = "true" ] attribute solid { SFBool }?,
  [ a:defaultValue = "0" ] attribute xDimension { SFInt32 }?,
  [ a:defaultValue = "1.0" ] attribute xSpacing { SFFloat }?,
  [ a:defaultValue = "0" ] attribute zDimension { SFInt32 }?,
  [ a:defaultValue = "1.0" ] attribute zSpacing { SFFloat }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
ExternProtoDeclare =
  element ExternProtoDeclare { attlist.ExternProtoDeclare, field* }
attlist.ExternProtoDeclare &=
  attribute name { xsd:NMTOKEN },
  attribute url { MFString },
  attribute appinfo { SFString }?,
  attribute documentation { SFString }?
Extrusion = element Extrusion { attlist.Extrusion, IS?, MetadataNodes? }
attlist.Extrusion &=
  [ a:defaultValue = "true" ] attribute beginCap { SFBool }?,
  [ a:defaultValue = "true" ] attribute ccw { SFBool }?,
  [ a:defaultValue = "true" ] attribute convex { SFBool }?,
  [ a:defaultValue = "0.0" ] attribute creaseAngle { SFFloat }?,
  [ a:defaultValue = "1 1 1 -1 -1 -1 -1 1 1 1" ]
  attribute crossSection { MFVec2f }?,
  [ a:defaultValue = "true" ] attribute endCap { SFBool }?,
  [ a:defaultValue = "0 0 1 0" ] attribute orientation { MFRotation }?,
  [ a:defaultValue = "1 1" ] attribute scale { MFVec2f }?,
  [ a:defaultValue = "true" ] attribute solid { SFBool }?,
  [ a:defaultValue = "0 0 0 0 1 0" ] attribute spine { MFVec3f }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
# field is only used in a Script, ProtoDeclare or ExternProtoDeclare.
# Initialization values for simple types go in the value attribute.
# Contained content tags are only for initialization of Node or Nodes.
field = element field { attlist.field, ProtoNodes* }
attlist.field &=
  attribute name { xsd:NMTOKEN },
  attribute accessType {
    "inputOnly" | "outputOnly" | "initializeOnly" | "inputOutput"
  },
  attribute type { X3dFieldTypes },
  attribute value { text }?,
  [ a:defaultValue = "default" ]
  attribute xml:space { "default" | "preserve" }?,
  attribute appinfo { SFString }?,
  attribute documentation { SFString }?
# fieldValue resets default field values inside a ProtoInstance.
# Initialization values for simple types go in the value attribute.  Otherwise
# contained-content tags are used for initialization of SFNode or MFNode values.
fieldValue = element fieldValue { attlist.fieldValue, ProtoNodes* }
attlist.fieldValue &=
  attribute name { xsd:NMTOKEN },
  attribute value { text }?
FillProperties =
  element FillProperties { attlist.FillProperties, IS?, MetadataNodes? }
attlist.FillProperties &=
  [ a:defaultValue = "true" ] attribute filled { SFBool }?,
  [ a:defaultValue = "true" ] attribute hatched { SFBool }?,
  [ a:defaultValue = "1" ] attribute hatchStyle { SFInt32 }?,
  [ a:defaultValue = "1 1 1" ] attribute hatchColor { SFColor }?,
  [ a:defaultValue = "fillProperties" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Fog = element Fog { attlist.Fog, IS?, MetadataNodes? }
attlist.Fog &=
  [ a:defaultValue = "1 1 1" ] attribute color { SFColor }?,
  [ a:defaultValue = "LINEAR" ]
  attribute fogType { "LINEAR" | "EXPONENTIAL" }?,
  [ a:defaultValue = "0" ] attribute visibilityRange { SFFloat }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
FontStyle = element FontStyle { attlist.FontStyle, IS?, MetadataNodes? }
attlist.FontStyle &=
  [ a:defaultValue = '"SERIF"' ] attribute family { MFString }?,
  [ a:defaultValue = "true" ] attribute horizontal { SFBool }?,
  [ a:defaultValue = '"BEGIN"' ] attribute justify { MFString }?,
  attribute language { SFString }?,
  [ a:defaultValue = "true" ] attribute leftToRight { SFBool }?,
  [ a:defaultValue = "1.0" ] attribute size { SFFloat }?,
  [ a:defaultValue = "1.0" ] attribute spacing { SFFloat }?,
  [ a:defaultValue = "PLAIN" ]
  attribute style { "PLAIN" | "BOLD" | "ITALIC" | "BOLDITALIC" }?,
  [ a:defaultValue = "true" ] attribute topToBottom { SFBool }?,
  [ a:defaultValue = "fontStyle" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
# Minimum supported values mentioned in VRML 97 specification
# family      ' "SERIF" "SANS" "TYPEWRITER" '
# justify     ' "FIRST" "BEGIN" "MIDDLE" "END" '
Group =
  element Group {
    attlist.Group, IS?, MetadataNodes?, (ChildrenNodes | WildcardNodes)*
  }
attlist.Group &=
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
ImageTexture =
  element ImageTexture { attlist.ImageTexture, IS?, MetadataNodes? }
attlist.ImageTexture &=
  attribute url { MFString }?,
  [ a:defaultValue = "true" ] attribute repeatS { SFBool }?,
  [ a:defaultValue = "true" ] attribute repeatT { SFBool }?,
  [ a:defaultValue = "texture" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
# Complete, unordered, concisely enumerated version of IndexedFaceSet content model by Heiko Grussbach
ColorCoordinateNormalTextureCoordinateContentModel =
  IS?,
  MetadataNodes?,
  ((ColorNodes,
    ((CoordinateNodes,
      ((NormalNodes, (TextureCoordinateNodes | WildcardNodes)?)
       | (TextureCoordinateNodes, (NormalNodes | WildcardNodes)?)
       | (WildcardNodes,
          (NormalNodes | TextureCoordinateNodes | WildcardNodes)?))?)
     | (NormalNodes,
        ((CoordinateNodes, (TextureCoordinateNodes | WildcardNodes)?)
         | (TextureCoordinateNodes, (CoordinateNodes | WildcardNodes)?)
         | (WildcardNodes,
            (CoordinateNodes
             | TextureCoordinateNodes
             | WildcardNodes)?))?)
     | (TextureCoordinateNodes,
        ((CoordinateNodes, (NormalNodes | WildcardNodes)?)
         | (NormalNodes, (CoordinateNodes | WildcardNodes)?)
         | (WildcardNodes,
            (CoordinateNodes | NormalNodes | WildcardNodes)?))?)
     | (WildcardNodes,
        ((CoordinateNodes,
          (NormalNodes | TextureCoordinateNodes | WildcardNodes)?)
         | (NormalNodes,
            (CoordinateNodes | TextureCoordinateNodes | WildcardNodes)?)
         | (TextureCoordinateNodes,
            (NormalNodes | TextureCoordinateNodes | WildcardNodes)?)
         | (WildcardNodes,
            (CoordinateNodes
             | NormalNodes
             | TextureCoordinateNodes
             | WildcardNodes)?))?))?)
   | (CoordinateNodes,
      ((ColorNodes,
        ((NormalNodes, (TextureCoordinateNodes | WildcardNodes)?)
         | (TextureCoordinateNodes, (NormalNodes | WildcardNodes)?)
         | (WildcardNodes,
            (NormalNodes | TextureCoordinateNodes | WildcardNodes)?))?)
       | (NormalNodes,
          ((ColorNodes, (TextureCoordinateNodes | WildcardNodes)?)
           | (TextureCoordinateNodes, (ColorNodes | WildcardNodes)?)
           | (WildcardNodes,
              (ColorNodes | TextureCoordinateNodes | WildcardNodes)?))?)
       | (TextureCoordinateNodes,
          ((ColorNodes, (NormalNodes | WildcardNodes)?)
           | (NormalNodes, (ColorNodes | WildcardNodes)?)
           | (WildcardNodes,
              (ColorNodes | NormalNodes | WildcardNodes)?))?)
       | (WildcardNodes,
          ((ColorNodes,
            (NormalNodes | TextureCoordinateNodes | WildcardNodes)?)
           | (NormalNodes,
              (ColorNodes | TextureCoordinateNodes | WildcardNodes)?)
           | (TextureCoordinateNodes,
              (NormalNodes | TextureCoordinateNodes | WildcardNodes)?)
           | (WildcardNodes,
              (ColorNodes
               | NormalNodes
               | TextureCoordinateNodes
               | WildcardNodes)?))?))?)
   | (NormalNodes,
      ((ColorNodes,
        ((CoordinateNodes, (TextureCoordinateNodes | WildcardNodes)?)
         | (TextureCoordinateNodes, (CoordinateNodes | WildcardNodes)?)
         | (WildcardNodes,
            (CoordinateNodes
             | TextureCoordinateNodes
             | WildcardNodes)?))?)
       | (CoordinateNodes,
          ((ColorNodes, (TextureCoordinateNodes | WildcardNodes)?)
           | (TextureCoordinateNodes, (ColorNodes | WildcardNodes)?)
           | (WildcardNodes,
              (ColorNodes | TextureCoordinateNodes | WildcardNodes)?))?)
       | (TextureCoordinateNodes,
          ((ColorNodes, (CoordinateNodes | WildcardNodes)?)
           | (CoordinateNodes, (ColorNodes | WildcardNodes)?)
           | (WildcardNodes,
              (ColorNodes | CoordinateNodes | WildcardNodes)?))?)
       | (WildcardNodes,
          ((ColorNodes,
            (CoordinateNodes | TextureCoordinateNodes | WildcardNodes)?)
           | (CoordinateNodes,
              (ColorNodes | TextureCoordinateNodes | WildcardNodes)?)
           | (TextureCoordinateNodes,
              (ColorNodes | CoordinateNodes | WildcardNodes)?)
           | (WildcardNodes,
              (ColorNodes
               | CoordinateNodes
               | TextureCoordinateNodes
               | WildcardNodes)?))?))?)
   | (TextureCoordinateNodes,
      ((ColorNodes,
        ((CoordinateNodes, (NormalNodes | WildcardNodes)?)
         | (NormalNodes, (CoordinateNodes | WildcardNodes)?)
         | (WildcardNodes,
            (CoordinateNodes | NormalNodes | WildcardNodes)?))?)
       | (CoordinateNodes,
          ((ColorNodes, (NormalNodes | WildcardNodes)?)
           | (NormalNodes, (ColorNodes | WildcardNodes)?)
           | (WildcardNodes,
              (ColorNodes | NormalNodes | WildcardNodes)?))?)
       | (NormalNodes,
          ((ColorNodes, (CoordinateNodes | WildcardNodes)?)
           | (CoordinateNodes, (ColorNodes | WildcardNodes)?)
           | (WildcardNodes,
              (ColorNodes | CoordinateNodes | WildcardNodes)?))?)
       | (WildcardNodes,
          ((ColorNodes,
            (NormalNodes | TextureCoordinateNodes | WildcardNodes)?)
           | (CoordinateNodes,
              (ColorNodes | NormalNodes | WildcardNodes)?)
           | (NormalNodes,
              (ColorNodes | CoordinateNodes | WildcardNodes)?)
           | (WildcardNodes,
              (ColorNodes
               | CoordinateNodes
               | NormalNodes
               | WildcardNodes)?))?))?)
   | (WildcardNodes,
      ((ColorNodes,
        ((CoordinateNodes,
          (NormalNodes | TextureCoordinateNodes | WildcardNodes)?)
         | (NormalNodes,
            (CoordinateNodes | TextureCoordinateNodes | WildcardNodes)?)
         | (TextureCoordinateNodes,
            (CoordinateNodes | NormalNodes | WildcardNodes)?)
         | (WildcardNodes,
            (CoordinateNodes
             | NormalNodes
             | TextureCoordinateNodes
             | WildcardNodes)?))?)
       | (CoordinateNodes,
          ((ColorNodes,
            (NormalNodes | TextureCoordinateNodes | WildcardNodes)?)
           | (NormalNodes,
              (ColorNodes | TextureCoordinateNodes | WildcardNodes)?)
           | (TextureCoordinateNodes,
              (ColorNodes | NormalNodes | WildcardNodes)?)
           | (WildcardNodes,
              (ColorNodes
               | NormalNodes
               | TextureCoordinateNodes
               | WildcardNodes)?))?)
       | (NormalNodes,
          ((ColorNodes,
            (CoordinateNodes | TextureCoordinateNodes | WildcardNodes)?)
           | (CoordinateNodes,
              (ColorNodes | TextureCoordinateNodes | WildcardNodes)?)
           | (TextureCoordinateNodes,
              (ColorNodes | CoordinateNodes | WildcardNodes)?)
           | (WildcardNodes,
              (CoordinateNodes
               | ColorNodes
               | TextureCoordinateNodes
               | WildcardNodes)?))?)
       | (TextureCoordinateNodes,
          ((ColorNodes,
            (CoordinateNodes | NormalNodes | WildcardNodes)?)
           | (CoordinateNodes,
              (ColorNodes | NormalNodes | WildcardNodes)?)
           | (NormalNodes,
              (ColorNodes | CoordinateNodes | WildcardNodes)?)
           | (WildcardNodes,
              (ColorNodes
               | CoordinateNodes
               | NormalNodes
               | WildcardNodes)?))?)
       | (WildcardNodes,
          ((ColorNodes,
            (CoordinateNodes
             | NormalNodes
             | TextureCoordinateNodes
             | WildcardNodes)?)
           | (CoordinateNodes,
              (ColorNodes
               | NormalNodes
               | TextureCoordinateNodes
               | WildcardNodes)?)
           | (NormalNodes,
              (ColorNodes
               | CoordinateNodes
               | TextureCoordinateNodes
               | WildcardNodes)?)
           | (TextureCoordinateNodes,
              (ColorNodes
               | CoordinateNodes
               | NormalNodes
               | WildcardNodes)?)
           | (WildcardNodes,
              (ColorNodes
               | CoordinateNodes
               | NormalNodes
               | TextureCoordinateNodes
               | WildcardNodes)?))?))?))?
IndexedFaceSet =
  element IndexedFaceSet {
    attlist.IndexedFaceSet,
    ColorCoordinateNormalTextureCoordinateContentModel
  }
IndexedLineSet =
  element IndexedLineSet {
    attlist.IndexedLineSet,
    IS?,
    MetadataNodes?,
    ((ColorNodes, (CoordinateNodes | WildcardNodes)?)
     | (CoordinateNodes, (ColorNodes | WildcardNodes)?)
     | (WildcardNodes,
        (ColorNodes | CoordinateNodes | WildcardNodes)?))?
  }
LineSet =
  element LineSet {
    attlist.LineSet,
    IS?,
    MetadataNodes?,
    ((ColorNodes, (CoordinateNodes | WildcardNodes)?)
     | (CoordinateNodes, (ColorNodes | WildcardNodes)?)
     | (WildcardNodes,
        (ColorNodes | CoordinateNodes | WildcardNodes)?))?
  }
attlist.IndexedFaceSet &=
  [ a:defaultValue = "true" ] attribute ccw { SFBool }?,
  attribute colorIndex { MFInt32 }?,
  [ a:defaultValue = "true" ] attribute colorPerVertex { SFBool }?,
  [ a:defaultValue = "true" ] attribute convex { SFBool }?,
  attribute coordIndex { MFInt32 }?,
  [ a:defaultValue = "0" ] attribute creaseAngle { SFFloat }?,
  attribute normalIndex { MFInt32 }?,
  [ a:defaultValue = "true" ] attribute normalPerVertex { SFBool }?,
  [ a:defaultValue = "true" ] attribute solid { SFBool }?,
  attribute texCoordIndex { MFInt32 }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
attlist.IndexedLineSet &=
  attribute colorIndex { MFInt32 }?,
  [ a:defaultValue = "true" ] attribute colorPerVertex { SFBool }?,
  attribute coordIndex { MFInt32 }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
attlist.LineSet &=
  attribute vertexCount { MFInt32 }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Inline = element Inline { attlist.Inline, IS?, MetadataNodes? }
attlist.Inline &=
  [ a:defaultValue = "true" ] attribute load { SFBool }?,
  attribute url { MFString }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
EXPORT = element EXPORT { attlist.EXPORT, empty }
attlist.EXPORT &=
  attribute localDEF { xsd:IDREF },
  attribute AS { xsd:NMTOKEN }?
IMPORT = element IMPORT { attlist.IMPORT, empty }
attlist.IMPORT &=
  attribute InlineDEF { xsd:IDREF },
  attribute importedDEF { xsd:NMTOKEN },
  attribute AS { xsd:ID }?
IntegerSequencer =
  element IntegerSequencer {
    attlist.IntegerSequencer, IS?, MetadataNodes?
  }
attlist.IntegerSequencer &=
  attribute key { MFFloat }?,
  attribute keyValue { MFFloat }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
IntegerTrigger =
  element IntegerTrigger { attlist.IntegerTrigger, IS?, MetadataNodes? }
attlist.IntegerTrigger &=
  [ a:defaultValue = "-1" ] attribute integerKey { SFInt32 }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
IS = element IS { attlist.IS, connect+ }
attlist.IS &= empty
connect = element connect { attlist.connect, empty }
attlist.connect &=
  attribute nodeField { xsd:NMTOKEN },
  attribute protoField { xsd:NMTOKEN }
KeySensor = element KeySensor { attlist.KeySensor, IS?, MetadataNodes? }
attlist.KeySensor &=
  [ a:defaultValue = "true" ] attribute enabled { SFBool }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
LineProperties =
  element LineProperties { attlist.LineProperties, IS?, MetadataNodes? }
attlist.LineProperties &=
  [ a:defaultValue = "true" ] attribute applied { SFBool }?,
  [ a:defaultValue = "1" ] attribute linetype { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute linewidthScaleFactor { SFFloat }?,
  [ a:defaultValue = "lineProperties" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
LoadSensor =
  element LoadSensor {
    attlist.LoadSensor, IS?, MetadataNodes?, (UrlNodes | WildcardNodes)*
  }
attlist.LoadSensor &=
  [ a:defaultValue = "true" ] attribute enabled { SFBool }?,
  [ a:defaultValue = "0" ] attribute timeOut { SFTime }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
LOD =
  element LOD {
    attlist.LOD, IS?, MetadataNodes?, (ChildrenNodes | WildcardNodes)*
  }
attlist.LOD &=
  [ a:defaultValue = "0 0 0" ] attribute center { SFVec3f }?,
  attribute range { MFFloat }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Material = element Material { attlist.Material, IS?, MetadataNodes? }
attlist.Material &=
  [ a:defaultValue = "0.2" ] attribute ambientIntensity { SFFloat }?,
  [ a:defaultValue = "0.8 0.8 0.8" ]
  attribute diffuseColor { SFColor }?,
  [ a:defaultValue = "0 0 0" ] attribute emissiveColor { SFColor }?,
  [ a:defaultValue = "0.2" ] attribute shininess { SFFloat }?,
  [ a:defaultValue = "0 0 0" ] attribute specularColor { SFColor }?,
  [ a:defaultValue = "0" ] attribute transparency { SFFloat }?,
  [ a:defaultValue = "material" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
# *** XHTML exerpts to define meta tag ***

# i18n, language, meta tag definitions from XHTML 1.0
# http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd
LanguageCode = xsd:NMTOKEN
# a language code, as per [IETF RFC3066/BCP47] ftp://ftp.isi.edu/in-notes/bcp/bcp47.txt

# internationalization attributes
# lang        language code (backwards compatible)
# xml:lang    language code (as per XML 1.0 spec)
# dir         direction for weak/neutral text
i18n =
  attribute lang { LanguageCode }?,
  attribute xml:lang { LanguageCode }?,
  attribute dir { "ltr" | "rtl" }?
head = element head { attlist.head, component*, meta* }
attlist.head &= empty
# generic metadata information, matches HTML usage, made attribute 'name' required
meta = element meta { attlist.meta, empty }
attlist.meta &=
  attribute http-equiv { text }?,
  attribute name { text },
  attribute content { text },
  attribute scheme { text }?,
  i18n
# formal X3D Metadata nodes
MetadataDouble =
  element MetadataDouble { attlist.MetadataDouble, IS?, MetadataNodes? }
attlist.MetadataDouble &=
  attribute name { SFString }?,
  attribute value { MFDouble }?,
  attribute reference { SFString }?,
  [ a:defaultValue = "metadata" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
MetadataFloat =
  element MetadataFloat { attlist.MetadataFloat, IS?, MetadataNodes? }
attlist.MetadataFloat &=
  attribute name { SFString }?,
  attribute value { MFFloat }?,
  attribute reference { SFString }?,
  [ a:defaultValue = "metadata" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
MetadataInteger =
  element MetadataInteger {
    attlist.MetadataInteger, IS?, MetadataNodes?
  }
attlist.MetadataInteger &=
  attribute name { SFString }?,
  attribute value { MFInt32 }?,
  attribute reference { SFString }?,
  [ a:defaultValue = "metadata" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
MetadataString =
  element MetadataString { attlist.MetadataString, IS?, MetadataNodes? }
attlist.MetadataString &=
  attribute name { SFString }?,
  attribute value { MFString }?,
  attribute reference { SFString }?,
  [ a:defaultValue = "metadata" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
# containerField discriminates whether child Metadata node(s) are 'metadata' or 'value' fields.
# NMTOKEN vice enumeration, since containerField might have another value as field in a ProtoInstance.
MetadataSet =
  element MetadataSet { attlist.MetadataSet, IS?, MetadataNodes* }
attlist.MetadataSet &=
  attribute reference { SFString }?,
  attribute name { SFString }?,
  [ a:defaultValue = "metadata" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
#  FAQ:  MovieTexture
# containerField='source'  when used as a Sound source,
# containerField='texture' when used as a Appearance texture source
MovieTexture =
  element MovieTexture { attlist.MovieTexture, IS?, MetadataNodes? }
attlist.MovieTexture &=
  [ a:defaultValue = "false" ] attribute loop { SFBool }?,
  [ a:defaultValue = "1.0" ] attribute speed { SFFloat }?,
  [ a:defaultValue = "0" ] attribute startTime { SFTime }?,
  [ a:defaultValue = "0" ] attribute stopTime { SFTime }?,
  attribute url { MFString }?,
  [ a:defaultValue = "true" ] attribute repeatS { SFBool }?,
  [ a:defaultValue = "true" ] attribute repeatT { SFBool }?,
  [ a:defaultValue = "0" ] attribute pauseTime { SFTime }?,
  [ a:defaultValue = "0" ] attribute resumeTime { SFTime }?,
  [ a:defaultValue = "texture" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
MultiTexture =
  element MultiTexture {
    attlist.MultiTexture,
    IS?,
    MetadataNodes?,
    ((MultiTextureChildTextures+, TextureTransformNodes*)
     | (TextureTransformNodes+, MultiTextureChildTextures*))?
  }
attlist.MultiTexture &=
  attribute mode { MultiTextureModes }?,
  attribute source { MultiTextureFunctionValues }?,
  attribute function { MultiTextureSourceValues }?,
  [ a:defaultValue = "1 1 1" ] attribute color { SFColor }?,
  [ a:defaultValue = "1.0" ] attribute alpha { SFFloat }?,
  [ a:defaultValue = "texture" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
MultiTextureCoordinate =
  element MultiTextureCoordinate {
    attlist.MultiTextureCoordinate,
    IS?,
    MetadataNodes?,
    (TextureCoordinate | TextureCoordinateGenerator | ProtoInstance)*
  }
attlist.MultiTextureCoordinate &=
  [ a:defaultValue = "texCoord" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
NavigationInfo =
  element NavigationInfo { attlist.NavigationInfo, IS?, MetadataNodes? }
attlist.NavigationInfo &=
  [ a:defaultValue = "0.25 1.6 0.75" ]
  attribute avatarSize { MFFloat }?,
  [ a:defaultValue = "true" ] attribute headlight { SFBool }?,
  [ a:defaultValue = "1" ] attribute speed { SFFloat }?,
  [ a:defaultValue = '"EXAMINE" "ANY"' ] attribute type { MFString }?,
  [ a:defaultValue = "0" ] attribute visibilityLimit { SFFloat }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Normal = element Normal { attlist.Normal, IS?, MetadataNodes? }
attlist.Normal &=
  attribute vector { MFVec3f }?,
  [ a:defaultValue = "normal" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
NormalInterpolator =
  element NormalInterpolator {
    attlist.NormalInterpolator, IS?, MetadataNodes?
  }
attlist.NormalInterpolator &=
  attribute key { MFFloat }?,
  attribute keyValue { MFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
OrientationInterpolator =
  element OrientationInterpolator {
    attlist.OrientationInterpolator, IS?, MetadataNodes?
  }
attlist.OrientationInterpolator &=
  attribute key { MFFloat }?,
  attribute keyValue { MFRotation }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
PixelTexture =
  element PixelTexture { attlist.PixelTexture, IS?, MetadataNodes? }
attlist.PixelTexture &=
  [ a:defaultValue = "0 0 0" ] attribute image { SFImage }?,
  [ a:defaultValue = "true" ] attribute repeatS { SFBool }?,
  [ a:defaultValue = "true" ] attribute repeatT { SFBool }?,
  [ a:defaultValue = "texture" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
PlaneSensor =
  element PlaneSensor { attlist.PlaneSensor, IS?, MetadataNodes? }
attlist.PlaneSensor &=
  attribute description { SFString }?,
  [ a:defaultValue = "true" ] attribute autoOffset { SFBool }?,
  [ a:defaultValue = "true" ] attribute enabled { SFBool }?,
  [ a:defaultValue = "-1 -1" ] attribute maxPosition { SFVec2f }?,
  [ a:defaultValue = "0 0" ] attribute minPosition { SFVec2f }?,
  [ a:defaultValue = "0 0 0" ] attribute offset { SFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
PointLight =
  element PointLight { attlist.PointLight, IS?, MetadataNodes? }
attlist.PointLight &=
  [ a:defaultValue = "0" ] attribute ambientIntensity { SFFloat }?,
  [ a:defaultValue = "1 0 0" ] attribute attenuation { SFVec3f }?,
  [ a:defaultValue = "1 1 1" ] attribute color { SFColor }?,
  [ a:defaultValue = "1" ] attribute intensity { SFFloat }?,
  [ a:defaultValue = "0 0 0" ] attribute location { SFVec3f }?,
  [ a:defaultValue = "true" ] attribute on { SFBool }?,
  [ a:defaultValue = "100" ] attribute radius { SFFloat }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
PointSet =
  element PointSet {
    attlist.PointSet,
    IS?,
    MetadataNodes?,
    ((ColorNodes, (CoordinateNodes | WildcardNodes)?)
     | (CoordinateNodes, (ColorNodes | WildcardNodes)?)
     | (WildcardNodes,
        (ColorNodes | CoordinateNodes | WildcardNodes)?))?
  }
attlist.PointSet &=
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
PositionInterpolator =
  element PositionInterpolator {
    attlist.PositionInterpolator, IS?, MetadataNodes?
  }
attlist.PositionInterpolator &=
  attribute key { MFFloat }?,
  attribute keyValue { MFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
PositionInterpolator2D =
  element PositionInterpolator2D {
    attlist.PositionInterpolator2D, IS?, MetadataNodes?
  }
attlist.PositionInterpolator2D &=
  attribute key { MFFloat }?,
  attribute keyValue { MFVec2f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
ProtoInterface =
  element ProtoInterface { attlist.ProtoInterface, field+ }
attlist.ProtoInterface &= empty
# choice of required first node contained in ProtoBody constrained by valid ( %ProtoNodes; ) rather than %SceneNodes; ) >
ProtoBody =
  element ProtoBody { attlist.ProtoBody, ProtoNodes, SceneNodes* }
attlist.ProtoBody &= empty
ProtoDeclare =
  element ProtoDeclare {
    attlist.ProtoDeclare, ProtoInterface?, ProtoBody
  }
# ( | ( field*, ( %ProtoNodes; ), ( %SceneNodes; )* ))
attlist.ProtoDeclare &=
  attribute name { xsd:NMTOKEN },
  attribute appinfo { SFString }?,
  attribute documentation { SFString }?
ProtoInstance =
  element ProtoInstance { attlist.ProtoInstance, fieldValue*, IS? }
# ( %SceneNodes; )*

# direct children disallowed, let fieldValue name="children" handle them
attlist.ProtoInstance &=
  attribute name { xsd:NMTOKEN },
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
ProximitySensor =
  element ProximitySensor {
    attlist.ProximitySensor, IS?, MetadataNodes?
  }
attlist.ProximitySensor &=
  [ a:defaultValue = "0 0 0" ] attribute center { SFVec3f }?,
  [ a:defaultValue = "0 0 0" ] attribute size { SFVec3f }?,
  [ a:defaultValue = "true" ] attribute enabled { SFBool }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
ROUTE = element ROUTE { attlist.ROUTE, empty }
attlist.ROUTE &=
  attribute fromNode { xsd:IDREF },
  attribute fromField { xsd:NMTOKEN },
  attribute toNode { xsd:IDREF },
  attribute toField { xsd:NMTOKEN }
ScalarInterpolator =
  element ScalarInterpolator {
    attlist.ScalarInterpolator, IS?, MetadataNodes?
  }
attlist.ScalarInterpolator &=
  attribute key { MFFloat }?,
  attribute keyValue { MFFloat }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Scene = element Scene { attlist.Scene, SceneNodes* }
attlist.Scene &= empty
# Script is similar to PROTO regarding user definition of multiple fields

# script code should be included as CDATA sections.  watch out on content-model order, originally ( #PCDATA | field )*

# can this mixed model be further tighted to allow only one IS, following zero or more field tags, prior to PCDATA?  
# <!ELEMENT Script ( #PCDATA | field | IS )* >
# <!ELEMENT Script ( (%MetadataNodes;)?, field*, IS?, #PCDATA ) >  
# 
# <!ELEMENT Script ( #PCDATA | (%MetadataNodes;)? | field* | IS? ) >
# 
# <!ELEMENT Script ( #PCDATA | MetadataDouble | MetadataFloat | MetadataInteger | MetadataSet | MetadataString | field | IS )* >
Script =
  element Script {
    attlist.Script, (text | MetadataNodes | field | IS)*
  }
attlist.Script &=
  attribute url { MFString }?,
  [ a:defaultValue = "false" ] attribute directOutput { SFBool }?,
  [ a:defaultValue = "false" ] attribute mustEvaluate { SFBool }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  [ a:defaultValue = "preserve" ] attribute xml:space { "preserve" }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Shape =
  element Shape {
    attlist.Shape,
    IS?,
    MetadataNodes?,
    ((AppearanceNodes, (GeometryNodes | WildcardNodes)?)
     | (GeometryNodes, (AppearanceNodes | WildcardNodes)?)
     | (WildcardNodes,
        (GeometryNodes | AppearanceNodes | WildcardNodes)?))?
  }
attlist.Shape &=
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Sound =
  element Sound {
    attlist.Sound,
    IS?,
    MetadataNodes?,
    (AudioClipNodes | MovieTextureNodes | WildcardNodes)?
  }
attlist.Sound &=
  [ a:defaultValue = "0 0 1" ] attribute direction { SFVec3f }?,
  [ a:defaultValue = "1" ] attribute intensity { SFFloat }?,
  [ a:defaultValue = "0 0 0" ] attribute location { SFVec3f }?,
  [ a:defaultValue = "10" ] attribute maxBack { SFFloat }?,
  [ a:defaultValue = "10" ] attribute maxFront { SFFloat }?,
  [ a:defaultValue = "1" ] attribute minBack { SFFloat }?,
  [ a:defaultValue = "1" ] attribute minFront { SFFloat }?,
  [ a:defaultValue = "0" ] attribute priority { SFFloat }?,
  [ a:defaultValue = "true" ] attribute spatialize { SFBool }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Sphere = element Sphere { attlist.Sphere, IS?, MetadataNodes? }
attlist.Sphere &=
  [ a:defaultValue = "1" ] attribute radius { SFFloat }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
SphereSensor =
  element SphereSensor { attlist.SphereSensor, IS?, MetadataNodes? }
attlist.SphereSensor &=
  attribute description { SFString }?,
  [ a:defaultValue = "true" ] attribute autoOffset { SFBool }?,
  [ a:defaultValue = "true" ] attribute enabled { SFBool }?,
  [ a:defaultValue = "0 1 0 0" ] attribute offset { SFRotation }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
SpotLight = element SpotLight { attlist.SpotLight, IS?, MetadataNodes? }
attlist.SpotLight &=
  [ a:defaultValue = "0" ] attribute ambientIntensity { SFFloat }?,
  [ a:defaultValue = "1 0 0" ] attribute attenuation { SFVec3f }?,
  [ a:defaultValue = "1.570796" ] attribute beamWidth { SFFloat }?,
  [ a:defaultValue = "1 1 1" ] attribute color { SFColor }?,
  [ a:defaultValue = "0.785398" ] attribute cutOffAngle { SFFloat }?,
  [ a:defaultValue = "0 0 -1" ] attribute direction { SFVec3f }?,
  [ a:defaultValue = "1" ] attribute intensity { SFFloat }?,
  [ a:defaultValue = "0 0 0" ] attribute location { SFVec3f }?,
  [ a:defaultValue = "true" ] attribute on { SFBool }?,
  [ a:defaultValue = "100" ] attribute radius { SFFloat }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
StaticGroup =
  element StaticGroup {
    attlist.StaticGroup,
    IS?,
    MetadataNodes?,
    (ChildrenNodes | WildcardNodes)*
  }
attlist.StaticGroup &=
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
StringSensor =
  element StringSensor { attlist.StringSensor, IS?, MetadataNodes? }
attlist.StringSensor &=
  [ a:defaultValue = "true" ] attribute enabled { SFBool }?,
  [ a:defaultValue = "true" ] attribute deletionAllowed { SFBool }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Switch =
  element Switch {
    attlist.Switch,
    IS?,
    MetadataNodes?,
    (ChildrenNodes | WildcardNodes)*
  }
attlist.Switch &=
  [ a:defaultValue = "-1" ] attribute whichChoice { SFInt32 }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Text =
  element Text {
    attlist.Text, IS?, MetadataNodes?, (FontStyleNodes? | WildcardNodes)
  }
attlist.Text &=
  attribute string { MFString }?,
  attribute length { MFFloat }?,
  [ a:defaultValue = "0.0" ] attribute maxExtent { SFFloat }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
# backTexture, bottomTexture, frontTexture, leftTexture, rightTexture, topTexture; could use rule for 0..6 children here
TextureBackground =
  element TextureBackground {
    attlist.TextureBackground, IS?, MetadataNodes?, TextureNodes*
  }
attlist.TextureBackground &=
  attribute groundAngle { MFFloat }?,
  attribute groundColor { MFColor }?,
  attribute skyAngle { MFFloat }?,
  [ a:defaultValue = "0 0 0" ] attribute skyColor { MFColor }?,
  [ a:defaultValue = "0" ] attribute transparency { MFFloat }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
TextureCoordinate =
  element TextureCoordinate {
    attlist.TextureCoordinate, IS?, MetadataNodes?
  }
attlist.TextureCoordinate &=
  attribute point { MFVec2f }?,
  [ a:defaultValue = "texCoord" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
TextureCoordinateGenerator =
  element TextureCoordinateGenerator {
    attlist.TextureCoordinateGenerator, IS?, MetadataNodes?
  }
attlist.TextureCoordinateGenerator &=
  [ a:defaultValue = "SPHERE" ]
  attribute mode { TextureCoordinateGeneratorModes }?,
  attribute parameter { MFFloat }?,
  [ a:defaultValue = "texCoord" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
TextureTransform =
  element TextureTransform {
    attlist.TextureTransform, IS?, MetadataNodes?
  }
attlist.TextureTransform &=
  [ a:defaultValue = "0 0" ] attribute center { SFVec2f }?,
  [ a:defaultValue = "0" ] attribute rotation { SFFloat }?,
  [ a:defaultValue = "1 1" ] attribute scale { SFVec2f }?,
  [ a:defaultValue = "0 0" ] attribute translation { SFVec2f }?,
  [ a:defaultValue = "textureTransform" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
MultiTextureTransform =
  element MultiTextureTransform {
    attlist.MultiTextureTransform,
    IS?,
    (TextureTransform | ProtoInstance)*
  }
attlist.MultiTextureTransform &=
  [ a:defaultValue = "textureTransform" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
TimeSensor =
  element TimeSensor { attlist.TimeSensor, IS?, MetadataNodes? }
attlist.TimeSensor &=
  [ a:defaultValue = "1.0" ] attribute cycleInterval { SFTime }?,
  [ a:defaultValue = "true" ] attribute enabled { SFBool }?,
  [ a:defaultValue = "false" ] attribute loop { SFBool }?,
  [ a:defaultValue = "0" ] attribute startTime { SFTime }?,
  [ a:defaultValue = "0" ] attribute stopTime { SFTime }?,
  [ a:defaultValue = "0" ] attribute pauseTime { SFTime }?,
  [ a:defaultValue = "0" ] attribute resumeTime { SFTime }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
TimeTrigger =
  element TimeTrigger { attlist.TimeTrigger, IS?, MetadataNodes? }
attlist.TimeTrigger &=
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
TouchSensor =
  element TouchSensor { attlist.TouchSensor, IS?, MetadataNodes? }
attlist.TouchSensor &=
  attribute description { SFString }?,
  [ a:defaultValue = "true" ] attribute enabled { SFBool }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Transform =
  element Transform {
    attlist.Transform,
    IS?,
    MetadataNodes?,
    (ChildrenNodes | WildcardNodes)*
  }
attlist.Transform &=
  [ a:defaultValue = "0 0 0" ] attribute center { SFVec3f }?,
  [ a:defaultValue = "0 0 1 0" ] attribute rotation { SFRotation }?,
  [ a:defaultValue = "1 1 1" ] attribute scale { SFVec3f }?,
  [ a:defaultValue = "0 0 1 0" ]
  attribute scaleOrientation { SFRotation }?,
  [ a:defaultValue = "0 0 0" ] attribute translation { SFVec3f }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
IndexedTriangleFanSet =
  element IndexedTriangleFanSet {
    attlist.IndexedTriangleFanSet,
    ColorCoordinateNormalTextureCoordinateContentModel
  }
attlist.IndexedTriangleFanSet &=
  attribute index { MFInt32 }?,
  [ a:defaultValue = "true" ] attribute ccw { SFBool }?,
  [ a:defaultValue = "true" ] attribute colorPerVertex { SFBool }?,
  [ a:defaultValue = "true" ] attribute normalPerVertex { SFBool }?,
  [ a:defaultValue = "true" ] attribute solid { SFBool }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
IndexedTriangleSet =
  element IndexedTriangleSet {
    attlist.IndexedTriangleSet,
    ColorCoordinateNormalTextureCoordinateContentModel
  }
attlist.IndexedTriangleSet &=
  attribute index { MFInt32 }?,
  [ a:defaultValue = "true" ] attribute ccw { SFBool }?,
  [ a:defaultValue = "true" ] attribute colorPerVertex { SFBool }?,
  [ a:defaultValue = "true" ] attribute normalPerVertex { SFBool }?,
  [ a:defaultValue = "true" ] attribute solid { SFBool }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
IndexedTriangleStripSet =
  element IndexedTriangleStripSet {
    attlist.IndexedTriangleStripSet,
    ColorCoordinateNormalTextureCoordinateContentModel
  }
attlist.IndexedTriangleStripSet &=
  attribute index { MFInt32 }?,
  attribute stripCount { MFInt32 }?,
  [ a:defaultValue = "true" ] attribute ccw { SFBool }?,
  [ a:defaultValue = "true" ] attribute colorPerVertex { SFBool }?,
  [ a:defaultValue = "true" ] attribute normalPerVertex { SFBool }?,
  [ a:defaultValue = "true" ] attribute solid { SFBool }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
TriangleFanSet =
  element TriangleFanSet {
    attlist.TriangleFanSet,
    ColorCoordinateNormalTextureCoordinateContentModel
  }
attlist.TriangleFanSet &=
  attribute fanCount { MFInt32 }?,
  [ a:defaultValue = "true" ] attribute ccw { SFBool }?,
  [ a:defaultValue = "true" ] attribute colorPerVertex { SFBool }?,
  [ a:defaultValue = "true" ] attribute normalPerVertex { SFBool }?,
  [ a:defaultValue = "true" ] attribute solid { SFBool }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
TriangleSet =
  element TriangleSet {
    attlist.TriangleSet,
    ColorCoordinateNormalTextureCoordinateContentModel
  }
attlist.TriangleSet &=
  [ a:defaultValue = "true" ] attribute ccw { SFBool }?,
  [ a:defaultValue = "true" ] attribute colorPerVertex { SFBool }?,
  [ a:defaultValue = "true" ] attribute normalPerVertex { SFBool }?,
  [ a:defaultValue = "true" ] attribute solid { SFBool }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
TriangleStripSet =
  element TriangleStripSet {
    attlist.TriangleStripSet,
    ColorCoordinateNormalTextureCoordinateContentModel
  }
attlist.TriangleStripSet &=
  attribute stripCount { MFInt32 }?,
  [ a:defaultValue = "true" ] attribute ccw { SFBool }?,
  [ a:defaultValue = "true" ] attribute colorPerVertex { SFBool }?,
  [ a:defaultValue = "true" ] attribute normalPerVertex { SFBool }?,
  [ a:defaultValue = "true" ] attribute solid { SFBool }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Viewpoint = element Viewpoint { attlist.Viewpoint, IS?, MetadataNodes? }
attlist.Viewpoint &=
  [ a:defaultValue = "0.785398" ] attribute fieldOfView { SFFloat }?,
  [ a:defaultValue = "true" ] attribute jump { SFBool }?,
  [ a:defaultValue = "0 0 1 0" ] attribute orientation { SFRotation }?,
  [ a:defaultValue = "0 0 10" ] attribute position { SFVec3f }?,
  attribute description { SFString }?,
  [ a:defaultValue = "0 0 0" ] attribute centerOfRotation { SFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
# centerOfRotation point relates to NavigationInfo EXAMINE mode.
VisibilitySensor =
  element VisibilitySensor {
    attlist.VisibilitySensor, IS?, MetadataNodes?
  }
attlist.VisibilitySensor &=
  [ a:defaultValue = "0 0 0" ] attribute center { SFVec3f }?,
  [ a:defaultValue = "true" ] attribute enabled { SFBool }?,
  [ a:defaultValue = "0 0 0" ] attribute size { SFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
WorldInfo = element WorldInfo { attlist.WorldInfo, IS?, MetadataNodes? }
attlist.WorldInfo &=
  attribute info { MFString }?,
  attribute title { SFString }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
X3D = element X3D { attlist.X3D, head?, Scene }
attlist.X3D &=
  [ a:defaultValue = "http://www.web3d.org/specifications/x3d-3.0.xsd" ]
  attribute xsd:noNamespaceSchemaLocation { text }?,
  attribute profile { profileNames },
  [ a:defaultValue = "3.0" ] attribute version { string "3.0" }?
# EspduTransform includes DIS CollisionPdu DetonatePdu FirePdu
EspduTransform =
  element EspduTransform {
    attlist.EspduTransform,
    IS?,
    MetadataNodes?,
    (ChildrenNodes | WildcardNodes)*
  }
attlist.EspduTransform &=
  attribute marking { SFString }?,
  [ a:defaultValue = "0" ] attribute siteID { SFInt32 }?,
  [ a:defaultValue = "1" ] attribute applicationID { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute entityID { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute forceID { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute entityKind { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute entityDomain { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute entityCountry { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute entityCategory { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute entitySubCategory { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute entitySpecific { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute entityExtra { SFInt32 }?,
  [ a:defaultValue = "0.1" ] attribute readInterval { SFTime }?,
  [ a:defaultValue = "1.0" ] attribute writeInterval { SFTime }?,
  [ a:defaultValue = "standAlone" ]
  attribute networkMode {
    "standAlone" | "networkReader" | "networkWriter"
  }?,
  [ a:defaultValue = "0 0 0" ] attribute translation { SFVec3f }?,
  [ a:defaultValue = "0 0 1 0" ] attribute rotation { SFRotation }?,
  [ a:defaultValue = "1 1 1" ] attribute scale { SFVec3f }?,
  [ a:defaultValue = "0 0 1 0" ]
  attribute scaleOrientation { SFRotation }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "0 0 0" ] attribute center { SFVec3f }?,
  [ a:defaultValue = "localhost" ] attribute address { SFString }?,
  [ a:defaultValue = "0" ] attribute port { SFInt32 }?,
  attribute multicastRelayHost { SFString }?,
  [ a:defaultValue = "0" ] attribute multicastRelayPort { SFInt32 }?,
  [ a:defaultValue = "false" ] attribute rtpHeaderExpected { SFBool }?,
  [ a:defaultValue = "0" ] attribute deadReckoning { SFInt32 }?,
  [ a:defaultValue = "0 0 0" ] attribute linearVelocity { SFVec3f }?,
  [ a:defaultValue = "0 0 0" ]
  attribute linearAcceleration { SFVec3f }?,
  [ a:defaultValue = "false" ] attribute fired1 { SFBool }?,
  [ a:defaultValue = "false" ] attribute fired2 { SFBool }?,
  [ a:defaultValue = "0 0 0" ]
  attribute munitionStartPoint { SFVec3f }?,
  [ a:defaultValue = "0 0 0" ] attribute munitionEndPoint { SFVec3f }?,
  [ a:defaultValue = "0" ] attribute warhead { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute fuse { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute munitionQuantity { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute firingRate { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute firingRange { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute munitionSiteID { SFInt32 }?,
  [ a:defaultValue = "1" ] attribute munitionApplicationID { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute munitionEntityID { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute fireMissionIndex { SFInt32 }?,
  [ a:defaultValue = "0" ]
  attribute articulationParameterCount { SFInt32 }?,
  attribute articulationParameterDesignatorArray { MFInt32 }?,
  attribute articulationParameterChangeIndicatorArray { MFInt32 }?,
  attribute articulationParameterIdPartAttachedArray { MFInt32 }?,
  attribute articulationParameterTypeArray { MFInt32 }?,
  attribute articulationParameterArray { MFFloat }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
ReceiverPdu =
  element ReceiverPdu { attlist.ReceiverPdu, IS?, MetadataNodes? }
attlist.ReceiverPdu &=
  [ a:defaultValue = "1" ] attribute whichGeometry { SFInt32 }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "0" ] attribute siteID { SFInt32 }?,
  [ a:defaultValue = "1" ] attribute applicationID { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute entityID { SFInt32 }?,
  [ a:defaultValue = "0.1" ] attribute readInterval { SFTime }?,
  [ a:defaultValue = "1.0" ] attribute writeInterval { SFTime }?,
  [ a:defaultValue = "standAlone" ]
  attribute networkMode {
    "standAlone" | "networkReader" | "networkWriter"
  }?,
  [ a:defaultValue = "localhost" ] attribute address { SFString }?,
  [ a:defaultValue = "0" ] attribute port { SFInt32 }?,
  attribute multicastRelayHost { SFString }?,
  [ a:defaultValue = "0" ] attribute multicastRelayPort { SFInt32 }?,
  [ a:defaultValue = "false" ] attribute rtpHeaderExpected { SFBool }?,
  [ a:defaultValue = "0" ] attribute radioID { SFInt32 }?,
  [ a:defaultValue = "0.0" ] attribute receivedPower { SFFloat }?,
  [ a:defaultValue = "0" ] attribute receiverState { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute transmitterSiteID { SFInt32 }?,
  [ a:defaultValue = "0" ]
  attribute transmitterApplicationID { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute transmitterEntityID { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute transmitterRadioID { SFInt32 }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
SignalPdu = element SignalPdu { attlist.SignalPdu, IS?, MetadataNodes? }
attlist.SignalPdu &=
  [ a:defaultValue = "1" ] attribute whichGeometry { SFInt32 }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "0" ] attribute siteID { SFInt32 }?,
  [ a:defaultValue = "1" ] attribute applicationID { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute entityID { SFInt32 }?,
  [ a:defaultValue = "0.1" ] attribute readInterval { SFTime }?,
  [ a:defaultValue = "1.0" ] attribute writeInterval { SFTime }?,
  [ a:defaultValue = "standAlone" ]
  attribute networkMode {
    "standAlone" | "networkReader" | "networkWriter"
  }?,
  [ a:defaultValue = "localhost" ] attribute address { SFString }?,
  [ a:defaultValue = "0" ] attribute port { SFInt32 }?,
  attribute multicastRelayHost { SFString }?,
  [ a:defaultValue = "0" ] attribute multicastRelayPort { SFInt32 }?,
  [ a:defaultValue = "false" ] attribute rtpHeaderExpected { SFBool }?,
  [ a:defaultValue = "0" ] attribute radioID { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute encodingScheme { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute tdlType { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute sampleRate { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute samples { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute dataLength { SFInt32 }?,
  attribute data { MFInt32 }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
TransmitterPdu =
  element TransmitterPdu { attlist.TransmitterPdu, IS?, MetadataNodes? }
attlist.TransmitterPdu &=
  [ a:defaultValue = "1" ] attribute whichGeometry { SFInt32 }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "0" ] attribute siteID { SFInt32 }?,
  [ a:defaultValue = "1" ] attribute applicationID { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute entityID { SFInt32 }?,
  [ a:defaultValue = "0.1" ] attribute readInterval { SFTime }?,
  [ a:defaultValue = "1.0" ] attribute writeInterval { SFTime }?,
  [ a:defaultValue = "standAlone" ]
  attribute networkMode {
    "standAlone" | "networkReader" | "networkWriter"
  }?,
  [ a:defaultValue = "localhost" ] attribute address { SFString }?,
  [ a:defaultValue = "0" ] attribute port { SFInt32 }?,
  attribute multicastRelayHost { SFString }?,
  [ a:defaultValue = "0" ] attribute multicastRelayPort { SFInt32 }?,
  [ a:defaultValue = "false" ] attribute rtpHeaderExpected { SFBool }?,
  [ a:defaultValue = "0" ] attribute radioID { SFInt32 }?,
  [ a:defaultValue = "0 0 0" ] attribute antennaLocation { SFVec3f }?,
  [ a:defaultValue = "0" ] attribute antennaPatternLength { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute antennaPatternType { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute cryptoKeyId { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute cryptoSystem { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute frequency { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute inputSource { SFInt32 }?,
  [ a:defaultValue = "0" ]
  attribute lengthOfModulationParameters { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute modulationTypeDetail { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute modulationTypeMajor { SFInt32 }?,
  [ a:defaultValue = "0" ]
  attribute modulationTypeSpreadSpectrum { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute modulationTypeSystem { SFInt32 }?,
  [ a:defaultValue = "0.0" ] attribute power { SFFloat }?,
  [ a:defaultValue = "0" ]
  attribute radioEntityTypeCategory { SFInt32 }?,
  [ a:defaultValue = "0" ]
  attribute radioEntityTypeCountry { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute radioEntityTypeDomain { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute radioEntityTypeKind { SFInt32 }?,
  [ a:defaultValue = "0" ]
  attribute radioEntityTypeNomenclature { SFInt32 }?,
  [ a:defaultValue = "0" ]
  attribute radioEntityTypeNomenclatureVersion { SFInt32 }?,
  [ a:defaultValue = "0 0 0" ]
  attribute relativeAntennaLocation { SFVec3f }?,
  [ a:defaultValue = "0.0" ]
  attribute transmitFrequencyBandwidth { SFFloat }?,
  [ a:defaultValue = "0" ] attribute transmitState { SFInt32 }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
GeoCoordinate =
  element GeoCoordinate {
    attlist.GeoCoordinate, IS?, MetadataNodes?, GeoOrigin?
  }
# X3DCoordinateNodeType
attlist.GeoCoordinate &=
  [ a:defaultValue = '"GD" "WE"' ] attribute geoSystem { MFString }?,
  attribute point { MFVec3d }?,
  [ a:defaultValue = "coord" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
# need to restrict GeoOrigin to first element, or relax schema restriction
GeoElevationGrid =
  element GeoElevationGrid {
    attlist.GeoElevationGrid,
    IS?,
    MetadataNodes?,
    ((ColorNodes,
      ((GeoOrigin,
        ((NormalNodes, (TextureCoordinateNodes | WildcardNodes)?)
         | (TextureCoordinateNodes, (NormalNodes | WildcardNodes)?)
         | (WildcardNodes,
            (NormalNodes | TextureCoordinateNodes | WildcardNodes)?))?)
       | (NormalNodes,
          ((GeoOrigin, (TextureCoordinateNodes | WildcardNodes)?)
           | (TextureCoordinateNodes, (GeoOrigin | WildcardNodes)?)
           | (WildcardNodes,
              (GeoOrigin | TextureCoordinateNodes | WildcardNodes)?))?)
       | (TextureCoordinateNodes,
          ((GeoOrigin, (NormalNodes | WildcardNodes)?)
           | (NormalNodes, (GeoOrigin | WildcardNodes)?)
           | (WildcardNodes,
              (GeoOrigin | NormalNodes | WildcardNodes)?))?)
       | (WildcardNodes,
          ((GeoOrigin,
            (NormalNodes | TextureCoordinateNodes | WildcardNodes)?)
           | (NormalNodes,
              (GeoOrigin | TextureCoordinateNodes | WildcardNodes)?)
           | (TextureCoordinateNodes,
              (NormalNodes | TextureCoordinateNodes | WildcardNodes)?)
           | (WildcardNodes,
              (GeoOrigin
               | NormalNodes
               | TextureCoordinateNodes
               | WildcardNodes)?))?))?)
     | (GeoOrigin,
        ((ColorNodes,
          ((NormalNodes, (TextureCoordinateNodes | WildcardNodes)?)
           | (TextureCoordinateNodes, (NormalNodes | WildcardNodes)?)
           | (WildcardNodes,
              (NormalNodes
               | TextureCoordinateNodes
               | WildcardNodes)?))?)
         | (NormalNodes,
            ((ColorNodes, (TextureCoordinateNodes | WildcardNodes)?)
             | (TextureCoordinateNodes, (ColorNodes | WildcardNodes)?)
             | (WildcardNodes,
                (ColorNodes
                 | TextureCoordinateNodes
                 | WildcardNodes)?))?)
         | (TextureCoordinateNodes,
            ((ColorNodes, (NormalNodes | WildcardNodes)?)
             | (NormalNodes, (ColorNodes | WildcardNodes)?)
             | (WildcardNodes,
                (ColorNodes | NormalNodes | WildcardNodes)?))?)
         | (WildcardNodes,
            ((ColorNodes,
              (NormalNodes | TextureCoordinateNodes | WildcardNodes)?)
             | (NormalNodes,
                (ColorNodes | TextureCoordinateNodes | WildcardNodes)?)
             | (TextureCoordinateNodes,
                (NormalNodes | TextureCoordinateNodes | WildcardNodes)?)
             | (WildcardNodes,
                (ColorNodes
                 | NormalNodes
                 | TextureCoordinateNodes
                 | WildcardNodes)?))?))?)
     | (NormalNodes,
        ((ColorNodes,
          ((GeoOrigin, (TextureCoordinateNodes | WildcardNodes)?)
           | (TextureCoordinateNodes, (GeoOrigin | WildcardNodes)?)
           | (WildcardNodes,
              (GeoOrigin | TextureCoordinateNodes | WildcardNodes)?))?)
         | (GeoOrigin,
            ((ColorNodes, (TextureCoordinateNodes | WildcardNodes)?)
             | (TextureCoordinateNodes, (ColorNodes | WildcardNodes)?)
             | (WildcardNodes,
                (ColorNodes
                 | TextureCoordinateNodes
                 | WildcardNodes)?))?)
         | (TextureCoordinateNodes,
            ((ColorNodes, (GeoOrigin | WildcardNodes)?)
             | (GeoOrigin, (ColorNodes | WildcardNodes)?)
             | (WildcardNodes,
                (ColorNodes | GeoOrigin | WildcardNodes)?))?)
         | (WildcardNodes,
            ((ColorNodes,
              (GeoOrigin | TextureCoordinateNodes | WildcardNodes)?)
             | (GeoOrigin,
                (ColorNodes | TextureCoordinateNodes | WildcardNodes)?)
             | (TextureCoordinateNodes,
                (ColorNodes | GeoOrigin | WildcardNodes)?)
             | (WildcardNodes,
                (ColorNodes
                 | GeoOrigin
                 | TextureCoordinateNodes
                 | WildcardNodes)?))?))?)
     | (TextureCoordinateNodes,
        ((ColorNodes,
          ((GeoOrigin, (NormalNodes | WildcardNodes)?)
           | (NormalNodes, (GeoOrigin | WildcardNodes)?)
           | (WildcardNodes,
              (GeoOrigin | NormalNodes | WildcardNodes)?))?)
         | (GeoOrigin,
            ((ColorNodes, (NormalNodes | WildcardNodes)?)
             | (NormalNodes, (ColorNodes | WildcardNodes)?)
             | (WildcardNodes,
                (ColorNodes | NormalNodes | WildcardNodes)?))?)
         | (NormalNodes,
            ((ColorNodes, (GeoOrigin | WildcardNodes)?)
             | (GeoOrigin, (ColorNodes | WildcardNodes)?)
             | (WildcardNodes,
                (ColorNodes | GeoOrigin | WildcardNodes)?))?)
         | (WildcardNodes,
            ((ColorNodes,
              (NormalNodes | TextureCoordinateNodes | WildcardNodes)?)
             | (GeoOrigin, (ColorNodes | NormalNodes | WildcardNodes)?)
             | (NormalNodes, (ColorNodes | GeoOrigin | WildcardNodes)?)
             | (WildcardNodes,
                (ColorNodes
                 | GeoOrigin
                 | NormalNodes
                 | WildcardNodes)?))?))?)
     | (WildcardNodes,
        ((ColorNodes,
          ((GeoOrigin,
            (NormalNodes | TextureCoordinateNodes | WildcardNodes)?)
           | (NormalNodes,
              (GeoOrigin | TextureCoordinateNodes | WildcardNodes)?)
           | (TextureCoordinateNodes,
              (GeoOrigin | NormalNodes | WildcardNodes)?)
           | (WildcardNodes,
              (GeoOrigin
               | NormalNodes
               | TextureCoordinateNodes
               | WildcardNodes)?))?)
         | (GeoOrigin,
            ((ColorNodes,
              (NormalNodes | TextureCoordinateNodes | WildcardNodes)?)
             | (NormalNodes,
                (ColorNodes | TextureCoordinateNodes | WildcardNodes)?)
             | (TextureCoordinateNodes,
                (ColorNodes | NormalNodes | WildcardNodes)?)
             | (WildcardNodes,
                (ColorNodes
                 | NormalNodes
                 | TextureCoordinateNodes
                 | WildcardNodes)?))?)
         | (NormalNodes,
            ((ColorNodes,
              (GeoOrigin | TextureCoordinateNodes | WildcardNodes)?)
             | (GeoOrigin,
                (ColorNodes | TextureCoordinateNodes | WildcardNodes)?)
             | (TextureCoordinateNodes,
                (ColorNodes | GeoOrigin | WildcardNodes)?)
             | (WildcardNodes,
                (GeoOrigin
                 | ColorNodes
                 | TextureCoordinateNodes
                 | WildcardNodes)?))?)
         | (TextureCoordinateNodes,
            ((ColorNodes, (GeoOrigin | NormalNodes | WildcardNodes)?)
             | (GeoOrigin, (ColorNodes | NormalNodes | WildcardNodes)?)
             | (NormalNodes, (ColorNodes | GeoOrigin | WildcardNodes)?)
             | (WildcardNodes,
                (ColorNodes
                 | GeoOrigin
                 | NormalNodes
                 | WildcardNodes)?))?)
         | (WildcardNodes,
            ((ColorNodes,
              (GeoOrigin
               | NormalNodes
               | TextureCoordinateNodes
               | WildcardNodes)?)
             | (GeoOrigin,
                (ColorNodes
                 | NormalNodes
                 | TextureCoordinateNodes
                 | WildcardNodes)?)
             | (NormalNodes,
                (ColorNodes
                 | GeoOrigin
                 | TextureCoordinateNodes
                 | WildcardNodes)?)
             | (TextureCoordinateNodes,
                (ColorNodes | GeoOrigin | NormalNodes | WildcardNodes)?)
             | (WildcardNodes,
                (ColorNodes
                 | GeoOrigin
                 | NormalNodes
                 | TextureCoordinateNodes
                 | WildcardNodes)?))?))?))?
  }
attlist.GeoElevationGrid &=
  [ a:defaultValue = '"GD" "WE"' ] attribute geoSystem { MFString }?,
  [ a:defaultValue = "0 0 0" ] attribute geoGridOrigin { SFVec3d }?,
  [ a:defaultValue = "0" ] attribute xDimension { SFInt32 }?,
  [ a:defaultValue = "1.0" ] attribute xSpacing { SFDouble }?,
  [ a:defaultValue = "1.0" ] attribute yScale { SFFloat }?,
  [ a:defaultValue = "0" ] attribute zDimension { SFInt32 }?,
  [ a:defaultValue = "1.0" ] attribute zSpacing { SFDouble }?,
  [ a:defaultValue = "0 0" ] attribute height { MFDouble }?,
  [ a:defaultValue = "true" ] attribute normalPerVertex { SFBool }?,
  [ a:defaultValue = "true" ] attribute ccw { SFBool }?,
  [ a:defaultValue = "true" ] attribute colorPerVertex { SFBool }?,
  [ a:defaultValue = "0" ] attribute creaseAngle { SFFloat }?,
  [ a:defaultValue = "true" ] attribute solid { SFBool }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
GeoLocation =
  element GeoLocation {
    attlist.GeoLocation,
    IS?,
    MetadataNodes?,
    (ChildrenNodes | WildcardNodes)*,
    (GeoOrigin, (ChildrenNodes | WildcardNodes)*)?
  }
attlist.GeoLocation &=
  [ a:defaultValue = '"GD" "WE"' ] attribute geoSystem { MFString }?,
  [ a:defaultValue = "0 0 0" ] attribute geoCoords { SFVec3d }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
GeoLOD =
  element GeoLOD {
    attlist.GeoLOD,
    IS?,
    MetadataNodes?,
    (ChildrenNodes | WildcardNodes)*,
    (GeoOrigin, (ChildrenNodes | WildcardNodes)*)?
  }
attlist.GeoLOD &=
  [ a:defaultValue = '"GD" "WE"' ] attribute geoSystem { MFString }?,
  attribute rootUrl { MFString }?,
  attribute child1Url { MFString }?,
  attribute child2Url { MFString }?,
  attribute child3Url { MFString }?,
  attribute child4Url { MFString }?,
  [ a:defaultValue = "10" ] attribute range { SFDouble }?,
  [ a:defaultValue = "0 0 0" ] attribute center { SFVec3d }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
GeoMetadata =
  element GeoMetadata { attlist.GeoMetadata, IS?, MetadataNodes? }
attlist.GeoMetadata &=
  attribute url { MFString }?,
  attribute data { xsd:IDREFS }?,
  attribute summary { MFString }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
# title			%SFString;	#IMPLIED
# description		%SFString;	#IMPLIED
# coordinateSystem 	%SFString;	#IMPLIED
# horizontalDatum		%SFString;	#IMPLIED
# verticalDatum		%SFString;	#IMPLIED
# ellipsoid		%SFString;	#IMPLIED
# extent			%SFString;	#IMPLIED
# resolution		%SFString;	#IMPLIED
# originator		%SFString;	#IMPLIED
# copyright		%SFString;	#IMPLIED
# date			%SFString;	#IMPLIED
# metadataFormat		%SFString;	#IMPLIED
# dataUrl			%SFString;	#IMPLIED
# dataFormat		%SFString;	#IMPLIED
GeoOrigin = element GeoOrigin { attlist.GeoOrigin, IS?, MetadataNodes? }
attlist.GeoOrigin &=
  [ a:defaultValue = '"GD" "WE"' ] attribute geoSystem { MFString }?,
  [ a:defaultValue = "0 0 0" ] attribute geoCoords { SFVec3d }?,
  [ a:defaultValue = "false" ] attribute rotateYUp { SFBool }?,
  [ a:defaultValue = "geoOrigin" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
GeoPositionInterpolator =
  element GeoPositionInterpolator {
    attlist.GeoPositionInterpolator, IS?, MetadataNodes?, GeoOrigin?
  }
attlist.GeoPositionInterpolator &=
  [ a:defaultValue = '"GD" "WE"' ] attribute geoSystem { MFString }?,
  attribute key { MFFloat }?,
  attribute keyValue { MFVec3d }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
GeoTouchSensor =
  element GeoTouchSensor {
    attlist.GeoTouchSensor, IS?, MetadataNodes?, GeoOrigin?
  }
attlist.GeoTouchSensor &=
  [ a:defaultValue = '"GD" "WE"' ] attribute geoSystem { MFString }?,
  [ a:defaultValue = "true" ] attribute enabled { SFBool }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
GeoViewpoint =
  element GeoViewpoint {
    attlist.GeoViewpoint, IS?, MetadataNodes?, GeoOrigin?
  }
attlist.GeoViewpoint &=
  [ a:defaultValue = '"GD" "WE"' ] attribute geoSystem { MFString }?,
  attribute description { SFString }?,
  [ a:defaultValue = "0 0 100000" ] attribute position { SFVec3d }?,
  [ a:defaultValue = "0 0 1 0" ] attribute orientation { SFRotation }?,
  [ a:defaultValue = "0.785398" ] attribute fieldOfView { SFFloat }?,
  [ a:defaultValue = "true" ] attribute jump { SFBool }?,
  [ a:defaultValue = '"EXAMINE" "ANY"' ]
  attribute navType { MFString }?,
  [ a:defaultValue = "true" ] attribute headlight { SFBool }?,
  [ a:defaultValue = "1.0" ] attribute speedFactor { SFFloat }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
# Note that setting JointNames as enumerations does not permit validation of other names.
JointNames =
  "c1"
  | "c2"
  | "c3"
  | "c4"
  | "c5"
  | "c6"
  | "c7"
  | "jaw"
  | "HumanoidRoot"
  | "l_acromioclavicular"
  | "l_ankle"
  | "l_calf"
  | "l_clavicle"
  | "l_elbow"
  | "l_eyeball"
  | "l_eyeball_joint"
  | "l_eyebrow"
  | "l_eyebrow_joint"
  | "l_eyelid"
  | "l_eyelid_joint"
  | "l_forearm"
  | "l_forefoot"
  | "l_hand"
  | "l_hindfoot"
  | "l_hip"
  | "l_index_distal"
  | "l_index_metacarpal"
  | "l_index_middle"
  | "l_index_proximal"
  | "l_index0"
  | "l_index1"
  | "l_index2"
  | "l_index3"
  | "l_knee"
  | "l_metatarsal"
  | "l_middistal"
  | "l_middle_distal"
  | "l_middle_metacarpal"
  | "l_middle_middle"
  | "l_middle_proximal"
  | "l_middle0"
  | "l_middle1"
  | "l_middle2"
  | "l_middle3"
  | "l_midproximal"
  | "l_midtarsal"
  | "l_pinky_distal"
  | "l_pinky_metacarpal"
  | "l_pinky_middle"
  | "l_pinky_proximal"
  | "l_pinky0"
  | "l_pinky1"
  | "l_pinky2"
  | "l_pinky3"
  | "l_ring_distal"
  | "l_ring_metacarpal"
  | "l_ring_middle"
  | "l_ring_proximal"
  | "l_ring0"
  | "l_ring1"
  | "l_ring2"
  | "l_ring3"
  | "l_scapula"
  | "l_shoulder"
  | "l_sternoclavicular"
  | "l_subtalar"
  | "l_thigh"
  | "l_thumb_distal"
  | "l_thumb_metacarpal"
  | "l_thumb_proximal"
  | "l_thumb1"
  | "l_thumb2"
  | "l_thumb3"
  | "l_upperarm"
  | "l_wrist"
  | "l1"
  | "l2"
  | "l3"
  | "l4"
  | "l5"
  | "pelvis"
  | "r_acromioclavicular"
  | "r_ankle"
  | "r_calf"
  | "r_clavicle"
  | "r_elbow"
  | "r_eyeball"
  | "r_eyeball_joint"
  | "r_eyebrow"
  | "r_eyebrow_joint"
  | "r_eyelid"
  | "r_eyelid_joint"
  | "r_forearm"
  | "r_forefoot"
  | "r_hand"
  | "r_hindfoot"
  | "r_hip"
  | "r_index_distal"
  | "r_index_metacarpal"
  | "r_index_middle"
  | "r_index_proximal"
  | "r_index0"
  | "r_index1"
  | "r_index2"
  | "r_index3"
  | "r_knee"
  | "r_metatarsal"
  | "r_middistal"
  | "r_middle_distal"
  | "r_middle_metacarpal"
  | "r_middle_middle"
  | "r_middle_proximal"
  | "r_middle0"
  | "r_middle1"
  | "r_middle2"
  | "r_middle3"
  | "r_midproximal"
  | "r_midtarsal"
  | "r_pinky_distal"
  | "r_pinky_metacarpal"
  | "r_pinky_middle"
  | "r_pinky_proximal"
  | "r_pinky0"
  | "r_pinky1"
  | "r_pinky2"
  | "r_pinky3"
  | "r_ring_distal"
  | "r_ring_metacarpal"
  | "r_ring_middle"
  | "r_ring_proximal"
  | "r_ring0"
  | "r_ring1"
  | "r_ring2"
  | "r_ring3"
  | "r_scapula"
  | "r_shoulder"
  | "r_sternoclavicular"
  | "r_subtalar"
  | "r_thigh"
  | "r_thumb_distal"
  | "r_thumb_metacarpal"
  | "r_thumb_proximal"
  | "r_thumb1"
  | "r_thumb2"
  | "r_thumb3"
  | "r_upperarm"
  | "r_wrist"
  | "sacroiliac"
  | "sacrum"
  | "skull"
  | "skullbase"
  | "t1"
  | "t2"
  | "t3"
  | "t4"
  | "t5"
  | "t6"
  | "t7"
  | "t8"
  | "t9"
  | "t10"
  | "t11"
  | "t12"
  | "temporomandibular"
  | "vc1"
  | "vc2"
  | "vc3"
  | "vc4"
  | "vc5"
  | "vc6"
  | "vc7"
  | "vl1"
  | "vl2"
  | "vl3"
  | "vl4"
  | "vl5"
  | "vt1"
  | "vt2"
  | "vt3"
  | "vt4"
  | "vt5"
  | "vt6"
  | "vt7"
  | "vt8"
  | "vt9"
  | "vt10"
  | "vt11"
  | "vt12"
HAnimDisplacer =
  element HAnimDisplacer { attlist.HAnimDisplacer, IS?, MetadataNodes? }
attlist.HAnimDisplacer &=
  attribute name { SFString }?,
  attribute coordIndex { MFInt32 }?,
  attribute displacements { MFVec3f }?,
  attribute weight { SFFloat }?,
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
HAnimHumanoid =
  element HAnimHumanoid {
    attlist.HAnimHumanoid,
    IS?,
    MetadataNodes?,
    (HAnimJoint*,
     HAnimSegment*,
     HAnimSite*,
     CoordinateNodes?,
     NormalNodes?,
     (ChildrenNodes | WildcardNodes)*)
  }
# skeleton/joints,	segments,      sites,      skinCoord,            skinNormal,       skin/viewpoints

# note that joints, segments and sites should be USE nodes.  skin Shapes will USE preceding skinCoord, skinNormal definitions.
attlist.HAnimHumanoid &=
  attribute name { SFString }?,
  attribute version { SFString }?,
  attribute info { MFString }?,
  [ a:defaultValue = "0 0 0" ] attribute translation { SFVec3f }?,
  [ a:defaultValue = "0 0 1 0" ] attribute rotation { SFRotation }?,
  [ a:defaultValue = "1 1 1" ] attribute scale { SFVec3f }?,
  [ a:defaultValue = "0 0 1 0" ]
  attribute scaleOrientation { SFRotation }?,
  [ a:defaultValue = "0 0 0" ] attribute center { SFVec3f }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
# not treated as separate attributes, instead these are
# encoded as "attribute=value" SFString entries in the
# MFString info field.
# 
# humanoidVersion		%SFString;	#IMPLIED
# authorName		%SFString;	#IMPLIED
# authorEmail		%SFString;	#IMPLIED
# copyright		%SFString;	#IMPLIED
# creationDate		%SFString;	#IMPLIED
# usageRestrictions	%SFString;	#IMPLIED
# age			%SFString;	#IMPLIED
# gender			%SFString;	#IMPLIED
# height			%SFString;	#IMPLIED
# weight			%SFString;	#IMPLIED
HAnimJoint =
  element HAnimJoint {
    attlist.HAnimJoint,
    IS?,
    MetadataNodes?,
    (ChildrenNodes | HAnimDisplacer | WildcardNodes)*
  }
attlist.HAnimJoint &=
  attribute name { JointNames }?,
  attribute ulimit { MFFloat }?,
  attribute llimit { MFFloat }?,
  [ a:defaultValue = "0 0 1 0" ]
  attribute limitOrientation { SFRotation }?,
  attribute skinCoordIndex { MFInt32 }?,
  attribute skinCoordWeight { MFFloat }?,
  [ a:defaultValue = "0 0 0" ] attribute stiffness { MFFloat }?,
  [ a:defaultValue = "0 0 0" ] attribute translation { SFVec3f }?,
  [ a:defaultValue = "0 0 1 0" ] attribute rotation { SFRotation }?,
  [ a:defaultValue = "1 1 1" ] attribute scale { SFVec3f }?,
  [ a:defaultValue = "0 0 1 0" ]
  attribute scaleOrientation { SFRotation }?,
  [ a:defaultValue = "0 0 0" ] attribute center { SFVec3f }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
# Multiple HAnimDisplacer nodes must appear consecutively inside HAnimSegment
HAnimSegment =
  element HAnimSegment {
    attlist.HAnimSegment,
    IS?,
    MetadataNodes?,
    (((ChildrenNodes | WildcardNodes)*,
      ((Coordinate, HAnimDisplacer*) | (HAnimDisplacer+, Coordinate?))?)
     | (Coordinate,
        ((ChildrenNodes*, HAnimDisplacer*)
         | (HAnimDisplacer+, (ChildrenNodes | WildcardNodes)*))?)
     | (HAnimDisplacer+,
        ((Coordinate, (ChildrenNodes | WildcardNodes)*)
         | ((ChildrenNodes | WildcardNodes)*, Coordinate?))?)?)
  }
attlist.HAnimSegment &=
  attribute name { JointNames }?,
  [ a:defaultValue = "0" ] attribute mass { SFFloat }?,
  [ a:defaultValue = "0 0 0" ] attribute centerOfMass { SFVec3f }?,
  [ a:defaultValue = "0 0 0 0 0 0 0 0 0" ]
  attribute momentsOfInertia { MFFloat }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
HAnimSite =
  element HAnimSite {
    attlist.HAnimSite,
    IS?,
    MetadataNodes?,
    (ChildrenNodes | WildcardNodes)*
  }
attlist.HAnimSite &=
  attribute name { SFString }?,
  [ a:defaultValue = "0 0 0" ] attribute translation { SFVec3f }?,
  [ a:defaultValue = "0 0 1 0" ] attribute rotation { SFRotation }?,
  [ a:defaultValue = "1 1 1" ] attribute scale { SFVec3f }?,
  [ a:defaultValue = "0 0 1 0" ]
  attribute scaleOrientation { SFRotation }?,
  [ a:defaultValue = "0 0 0" ] attribute center { SFVec3f }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
Contour2D =
  element Contour2D {
    attlist.Contour2D,
    IS?,
    MetadataNodes?,
    (NurbsControlCurveNodes | WildcardNodes)*
  }
attlist.Contour2D &=
  [ a:defaultValue = "trimmingContour" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
ContourPolyline2D =
  element ContourPolyline2D {
    attlist.ContourPolyline2D, IS?, MetadataNodes?
  }
attlist.ContourPolyline2D &=
  attribute point { MFVec2f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
# child CoordinateNode has containerField controlPoint
NurbsCurve =
  element NurbsCurve {
    attlist.NurbsCurve,
    IS?,
    MetadataNodes?,
    (CoordinateNodes | WildcardNodes)?
  }
attlist.NurbsCurve &=
  attribute knot { MFDouble }?,
  [ a:defaultValue = "3" ] attribute order { SFInt32 }?,
  attribute weight { MFDouble }?,
  [ a:defaultValue = "0" ] attribute tessellation { SFInt32 }?,
  [ a:defaultValue = "false" ] attribute closed { SFBool }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
NurbsCurve2D =
  element NurbsCurve2D { attlist.NurbsCurve2D, IS?, MetadataNodes? }
attlist.NurbsCurve2D &=
  attribute controlPoint { MFVec2f }?,
  attribute knot { MFFloat }?,
  [ a:defaultValue = "3" ] attribute order { SFInt32 }?,
  attribute weight { MFFloat }?,
  [ a:defaultValue = "0" ] attribute tessellation { SFInt32 }?,
  [ a:defaultValue = "false" ] attribute closed { SFBool }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
NurbsOrientationInterpolator =
  element NurbsOrientationInterpolator {
    attlist.NurbsOrientationInterpolator,
    IS?,
    MetadataNodes?,
    CoordinateNodes?
  }
attlist.NurbsOrientationInterpolator &=
  attribute knot { MFDouble }?,
  [ a:defaultValue = "3" ] attribute order { SFInt32 }?,
  attribute weight { MFDouble }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
NurbsPositionInterpolator =
  element NurbsPositionInterpolator {
    attlist.NurbsPositionInterpolator,
    IS?,
    MetadataNodes?,
    CoordinateNodes?
  }
attlist.NurbsPositionInterpolator &=
  attribute knot { MFDouble }?,
  [ a:defaultValue = "3" ] attribute order { SFInt32 }?,
  attribute weight { MFDouble }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
NurbsSurfaceInterpolator =
  element NurbsSurfaceInterpolator {
    attlist.NurbsSurfaceInterpolator,
    IS?,
    MetadataNodes?,
    CoordinateNodes?
  }
attlist.NurbsSurfaceInterpolator &=
  attribute weight { MFDouble }?,
  [ a:defaultValue = "0" ] attribute uDimension { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute vDimension { SFInt32 }?,
  attribute uKnot { MFDouble }?,
  attribute vKnot { MFDouble }?,
  [ a:defaultValue = "3" ] attribute uOrder { SFInt32 }?,
  [ a:defaultValue = "3" ] attribute vOrder { SFInt32 }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
NurbsSet =
  element NurbsSet {
    attlist.NurbsSet,
    IS?,
    MetadataNodes?,
    (NurbsPatchSurface
     | NurbsSweptSurface
     | NurbsSwungSurface
     | NurbsTrimmedSurface
     | WildcardNodes)*
  }
attlist.NurbsSet &=
  [ a:defaultValue = "1.0" ] attribute tessellationScale { SFFloat }?,
  [ a:defaultValue = "0 0 0" ] attribute bboxCenter { SFVec3f }?,
  [ a:defaultValue = "-1 -1 -1" ] attribute bboxSize { SFVec3f }?,
  [ a:defaultValue = "children" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
NurbsPatchSurface =
  element NurbsPatchSurface {
    attlist.NurbsPatchSurface,
    IS?,
    MetadataNodes?,
    (CoordinateNodes | WildcardNodes)?,
    (TextureCoordinateNodes | NurbsTextureCoordinate)?
  }
attlist.NurbsPatchSurface &=
  [ a:defaultValue = "false" ] attribute uClosed { SFBool }?,
  [ a:defaultValue = "false" ] attribute vClosed { SFBool }?,
  [ a:defaultValue = "0" ] attribute uDimension { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute vDimension { SFInt32 }?,
  attribute uKnot { MFDouble }?,
  attribute vKnot { MFDouble }?,
  [ a:defaultValue = "3" ] attribute uOrder { SFInt32 }?,
  [ a:defaultValue = "3" ] attribute vOrder { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute uTessellation { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute vTessellation { SFInt32 }?,
  attribute weight { MFDouble }?,
  [ a:defaultValue = "true" ] attribute solid { SFBool }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
NurbsTrimmedSurface =
  element NurbsTrimmedSurface {
    attlist.NurbsTrimmedSurface,
    IS?,
    MetadataNodes?,
    (CoordinateNodes | WildcardNodes)?,
    (TextureCoordinateNodes | NurbsTextureCoordinate)?,
    Contour2D*
  }
attlist.NurbsTrimmedSurface &=
  [ a:defaultValue = "false" ] attribute uClosed { SFBool }?,
  [ a:defaultValue = "false" ] attribute vClosed { SFBool }?,
  [ a:defaultValue = "0" ] attribute uDimension { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute vDimension { SFInt32 }?,
  attribute uKnot { MFDouble }?,
  attribute vKnot { MFDouble }?,
  [ a:defaultValue = "3" ] attribute uOrder { SFInt32 }?,
  [ a:defaultValue = "3" ] attribute vOrder { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute uTessellation { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute vTessellation { SFInt32 }?,
  attribute weight { MFFloat }?,
  [ a:defaultValue = "true" ] attribute solid { SFBool }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
NurbsSweptSurface =
  element NurbsSweptSurface {
    attlist.NurbsSweptSurface,
    IS?,
    MetadataNodes?,
    (NurbsCurve | WildcardNodes)?,
    (NurbsControlCurveNodes | WildcardNodes)?
  }
attlist.NurbsSweptSurface &=
  [ a:defaultValue = "true" ] attribute ccw { SFBool }?,
  [ a:defaultValue = "true" ] attribute solid { SFBool }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
NurbsSwungSurface =
  element NurbsSwungSurface {
    attlist.NurbsSwungSurface,
    IS?,
    MetadataNodes?,
    ((NurbsControlCurveNodes | WildcardNodes),
     (NurbsControlCurveNodes | WildcardNodes)?)?
  }
attlist.NurbsSwungSurface &=
  [ a:defaultValue = "true" ] attribute ccw { SFBool }?,
  [ a:defaultValue = "true" ] attribute solid { SFBool }?,
  [ a:defaultValue = "geometry" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
NurbsTextureCoordinate =
  element NurbsTextureCoordinate {
    attlist.NurbsTextureCoordinate,
    IS?,
    MetadataNodes?,
    CoordinateNodes?
  }
attlist.NurbsTextureCoordinate &=
  attribute weight { MFDouble }?,
  [ a:defaultValue = "0" ] attribute uDimension { SFInt32 }?,
  [ a:defaultValue = "0" ] attribute vDimension { SFInt32 }?,
  attribute uKnot { MFDouble }?,
  attribute vKnot { MFDouble }?,
  [ a:defaultValue = "3" ] attribute uOrder { SFInt32 }?,
  [ a:defaultValue = "3" ] attribute vOrder { SFInt32 }?,
  [ a:defaultValue = "texCoord" ]
  attribute containerField { xsd:NMTOKEN }?,
  [ a:defaultValue = "" ] attribute class { text }?,
  attribute DEF { xsd:ID }?,
  attribute USE { xsd:IDREF }?
# Finally, add inputOnly/outputOnly attributes and Web3dExtensionComponent from separate DTDs.
# Note that Web3dExtensionComponent content-model extensions needed to be added at beginning,
# prior to node-type definitions.
include "x3d-3.0-InputOutputFields.rnc"
NurbsGroup |= notAllowed
NurbsTextureSurface |= notAllowed
XvlShell |= notAllowed
start = NurbsSet | X3D
