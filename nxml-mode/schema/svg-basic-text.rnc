default namespace id2244565 = "http://www.w3.org/2000/svg"
namespace local = ""
namespace inh = inherit

FontFamilyValue.datatype = xsd:string

FontSizeValue.datatype = xsd:string

SVG.Font.extra.attrib = empty

SVG.Font.attrib &= 
   attribute font-family { FontFamilyValue.datatype }?,
   attribute font-size { FontSizeValue.datatype }?,
   attribute font-style { "normal" | "italic" | "oblique" | "inherit" }?,
   attribute font-weight
   {
      "normal"
    | "bold"
    | "bolder"
    | "lighter"
    | "100"
    | "200"
    | "300"
    | "400"
    | "500"
    | "600"
    | "700"
    | "800"
    | "900"
    | "inherit"
   }?,
   SVG.Font.extra.attrib

SVG.Text.extra.class = notAllowed

SVG.Text.class |= \text | SVG.Text.extra.class

SVG.TextContent.extra.class = notAllowed

SVG.TextContent.class = altGlyph | SVG.TextContent.extra.class

SVG.text.class = 
   text | SVG.Description.class | SVG.Animation.class | SVG.Hyperlink.class

SVG.text.content = SVG.text.class*

\text = element text { attlist.text, SVG.text.content }

attlist.text &= 
   SVG.Core.attrib,
   SVG.Conditional.attrib,
   SVG.Style.attrib,
   SVG.Font.attrib,
   SVG.Paint.attrib,
   SVG.Color.attrib,
   SVG.Opacity.attrib,
   SVG.Graphics.attrib,
   SVG.Clip.attrib,
   SVG.Mask.attrib,
   SVG.Filter.attrib,
   SVG.GraphicalEvents.attrib,
   SVG.Cursor.attrib,
   SVG.External.attrib,
   attribute x { Coordinates.datatype }?,
   attribute y { Coordinates.datatype }?,
   attribute rotate { Numbers.datatype }?,
   attribute transform { TransformList.datatype }?

SVG.altGlyph.content = text

altGlyph = element altGlyph { attlist.altGlyph, SVG.altGlyph.content }

attlist.altGlyph &= 
   SVG.Core.attrib,
   SVG.Conditional.attrib,
   SVG.Style.attrib,
   SVG.Font.attrib,
   SVG.Paint.attrib,
   SVG.Color.attrib,
   SVG.Opacity.attrib,
   SVG.Graphics.attrib,
   SVG.Clip.attrib,
   SVG.Mask.attrib,
   SVG.Filter.attrib,
   SVG.GraphicalEvents.attrib,
   SVG.Cursor.attrib,
   SVG.XLink.attrib,
   SVG.External.attrib,
   attribute glyphRef { text }?,
   attribute format { text }?

SVG.altGlyphDef.content = glyphRef+

altGlyphDef = 
   element altGlyphDef { attlist.altGlyphDef, SVG.altGlyphDef.content }

attlist.altGlyphDef &= SVG.Core.attrib

SVG.glyphRef.content = empty

glyphRef = element glyphRef { attlist.glyphRef, SVG.glyphRef.content }

attlist.glyphRef &= 
   SVG.Core.attrib,
   SVG.Style.attrib,
   SVG.Font.attrib,
   SVG.XLink.attrib,
   attribute glyphRef { text }?,
   attribute format { text }?
